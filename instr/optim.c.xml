<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C" filename="optim.c"><comment type="block">/*
 * optim.c
 * The main PNG optimization engine.
 *
 * Copyright (C) 2001-2017 Cosmin Truta and the Contributing Authors.
 *
 * This software is distributed under the zlib license.
 * Please see the accompanying LICENSE file.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optipng.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"proginfo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bitset.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ioutil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opngreduc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"png.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pngxtern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pngxutil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ratio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zlib.h"</cpp:file></cpp:include>


<comment type="block">/*
 * User exception setup.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cexcept.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>define_exception_type</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>exception_context</name></name></type> <name><name>the_exception_context</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>


<comment type="block">/*
 * The optimization level presets.
 */</comment>
<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>opng_preset</name>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>compr_level</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mem_level</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>strategy</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filter</name></decl>;</decl_stmt>
}</block> <decl><name><name>presets</name><index>[<expr><name>OPNG_OPTIM_LEVEL_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  { -zc    -zm    -zs   -f    }  */</comment>
    <expr><block>{ <expr><literal type="string">""</literal></expr>,    <expr><literal type="string">""</literal></expr>,    <expr><literal type="string">""</literal></expr>,   <expr><literal type="string">""</literal></expr>    }</block></expr>,  <comment type="block">/* -o0 */</comment>
    <expr><block>{ <expr><literal type="string">""</literal></expr>,    <expr><literal type="string">""</literal></expr>,    <expr><literal type="string">""</literal></expr>,   <expr><literal type="string">""</literal></expr>    }</block></expr>,  <comment type="block">/* -o1 */</comment>
    <expr><block>{ <expr><literal type="string">"9"</literal></expr>,   <expr><literal type="string">"8"</literal></expr>,   <expr><literal type="string">"0-"</literal></expr>, <expr><literal type="string">"0,5"</literal></expr> }</block></expr>,  <comment type="block">/* -o2 */</comment>
    <expr><block>{ <expr><literal type="string">"9"</literal></expr>,   <expr><literal type="string">"8-9"</literal></expr>, <expr><literal type="string">"0-"</literal></expr>, <expr><literal type="string">"0,5"</literal></expr> }</block></expr>,  <comment type="block">/* -o3 */</comment>
    <expr><block>{ <expr><literal type="string">"9"</literal></expr>,   <expr><literal type="string">"8"</literal></expr>,   <expr><literal type="string">"0-"</literal></expr>, <expr><literal type="string">"0-"</literal></expr>  }</block></expr>,  <comment type="block">/* -o4 */</comment>
    <expr><block>{ <expr><literal type="string">"9"</literal></expr>,   <expr><literal type="string">"8-9"</literal></expr>, <expr><literal type="string">"0-"</literal></expr>, <expr><literal type="string">"0-"</literal></expr>  }</block></expr>,  <comment type="block">/* -o5 */</comment>
    <expr><block>{ <expr><literal type="string">"1-9"</literal></expr>, <expr><literal type="string">"8"</literal></expr>,   <expr><literal type="string">"0-"</literal></expr>, <expr><literal type="string">"0-"</literal></expr>  }</block></expr>,  <comment type="block">/* -o6 */</comment>
    <expr><block>{ <expr><literal type="string">"1-9"</literal></expr>, <expr><literal type="string">"8-9"</literal></expr>, <expr><literal type="string">"0-"</literal></expr>, <expr><literal type="string">"0-"</literal></expr>  }</block></expr>   <comment type="block">/* -o7 */</comment>
}</block></expr></init></decl>;</struct>

<comment type="block">/*
 * The filter table.
 */</comment>
<decl_stmt><decl><specifier>static</specifier> <type><specifier>const</specifier> <name>int</name></type> <name><name>filter_table</name><index>[<expr><name>OPNG_FILTER_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><name>PNG_FILTER_NONE</name></expr>,   <comment type="block">/* -f0 */</comment>
    <expr><name>PNG_FILTER_SUB</name></expr>,    <comment type="block">/* -f1 */</comment>
    <expr><name>PNG_FILTER_UP</name></expr>,     <comment type="block">/* -f2 */</comment>
    <expr><name>PNG_FILTER_AVG</name></expr>,    <comment type="block">/* -f3 */</comment>
    <expr><name>PNG_FILTER_PAETH</name></expr>,  <comment type="block">/* -f4 */</comment>
    <expr><name>PNG_ALL_FILTERS</name></expr>    <comment type="block">/* -f5 */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Status flags.
 */</comment>
<enum>enum
<block>{
    <decl><name>INPUT_IS_PNG_FILE</name>           <init>= <expr><literal type="number">0x0001</literal></expr></init></decl>,
    <decl><name>INPUT_HAS_PNG_DATASTREAM</name>    <init>= <expr><literal type="number">0x0002</literal></expr></init></decl>,
    <decl><name>INPUT_HAS_PNG_SIGNATURE</name>     <init>= <expr><literal type="number">0x0004</literal></expr></init></decl>,
    <decl><name>INPUT_HAS_DIGITAL_SIGNATURE</name> <init>= <expr><literal type="number">0x0008</literal></expr></init></decl>,
    <decl><name>INPUT_HAS_MULTIPLE_IMAGES</name>   <init>= <expr><literal type="number">0x0010</literal></expr></init></decl>,
    <decl><name>INPUT_HAS_APNG</name>              <init>= <expr><literal type="number">0x0020</literal></expr></init></decl>,
    <decl><name>INPUT_HAS_STRIPPED_DATA</name>     <init>= <expr><literal type="number">0x0040</literal></expr></init></decl>,
    <decl><name>INPUT_HAS_JUNK</name>              <init>= <expr><literal type="number">0x0080</literal></expr></init></decl>,
    <decl><name>INPUT_HAS_ERRORS</name>            <init>= <expr><literal type="number">0x0100</literal></expr></init></decl>,
    <decl><name>OUTPUT_NEEDS_NEW_FILE</name>       <init>= <expr><literal type="number">0x1000</literal></expr></init></decl>,
    <decl><name>OUTPUT_NEEDS_NEW_IDAT</name>       <init>= <expr><literal type="number">0x2000</literal></expr></init></decl>,
    <decl><name>OUTPUT_HAS_ERRORS</name>           <init>= <expr><literal type="number">0x4000</literal></expr></init></decl>
}</block>;</enum>

<comment type="block">/*
 * The chunks handled by OptiPNG.
 */</comment>
<decl_stmt><decl><specifier>static</specifier> <type><specifier>const</specifier> <name>png_byte</name></type> <name><name>sig_PLTE</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x45</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><specifier>static</specifier> <type><specifier>const</specifier> <name>png_byte</name></type> <name><name>sig_tRNS</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x4e</literal></expr>, <expr><literal type="number">0x53</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><specifier>static</specifier> <type><specifier>const</specifier> <name>png_byte</name></type> <name><name>sig_IDAT</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x54</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><specifier>static</specifier> <type><specifier>const</specifier> <name>png_byte</name></type> <name><name>sig_IEND</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x4e</literal></expr>, <expr><literal type="number">0x44</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><specifier>static</specifier> <type><specifier>const</specifier> <name>png_byte</name></type> <name><name>sig_bKGD</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x4b</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x44</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><specifier>static</specifier> <type><specifier>const</specifier> <name>png_byte</name></type> <name><name>sig_hIST</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x54</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><specifier>static</specifier> <type><specifier>const</specifier> <name>png_byte</name></type> <name><name>sig_sBIT</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x54</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><specifier>static</specifier> <type><specifier>const</specifier> <name>png_byte</name></type> <name><name>sig_dSIG</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x47</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><specifier>static</specifier> <type><specifier>const</specifier> <name>png_byte</name></type> <name><name>sig_acTL</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x4c</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><specifier>static</specifier> <type><specifier>const</specifier> <name>png_byte</name></type> <name><name>sig_fcTL</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x4c</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><specifier>static</specifier> <type><specifier>const</specifier> <name>png_byte</name></type> <name><name>sig_fdAT</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x54</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * The optimization engine.
 * (Since the engine is not thread-safe, there isn't much to put in here...)
 */</comment>
<struct><specifier>static</specifier> struct <name>opng_engine_struct</name>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>started</name></decl>;</decl_stmt>
}</block> <decl><name>engine</name></decl>;</struct>

<comment type="block">/*
 * The optimization process.
 */</comment>
<struct><specifier>static</specifier> struct <name>opng_process_struct</name>
<block>{
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>num_iterations</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>opng_foffset_t</name></type> <name>in_datastream_offset</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>opng_fsize_t</name></type> <name>in_file_size</name></decl>, <decl><type ref="prev"/><name>out_file_size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>opng_fsize_t</name></type> <name>in_idat_size</name></decl>, <decl><type ref="prev"/><name>out_idat_size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>opng_fsize_t</name></type> <name>best_idat_size</name></decl>, <decl><type ref="prev"/><name>max_idat_size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>png_uint_32</name></type> <name>in_plte_trns_size</name></decl>, <decl><type ref="prev"/><name>out_plte_trns_size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>png_uint_32</name></type> <name>reductions</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>opng_bitset_t</name></type> <name>compr_level_set</name></decl>, <decl><type ref="prev"/><name>mem_level_set</name></decl>, <decl><type ref="prev"/><name>strategy_set</name></decl>, <decl><type ref="prev"/><name>filter_set</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>best_compr_level</name></decl>, <decl><type ref="prev"/><name>best_mem_level</name></decl>, <decl><type ref="prev"/><name>best_strategy</name></decl>, <decl><type ref="prev"/><name>best_filter</name></decl>;</decl_stmt>
}</block> <decl><name>process</name></decl>;</struct>

<comment type="block">/*
 * The optimization process limits.
 */</comment>
<decl_stmt><decl><specifier>static</specifier> <type><specifier>const</specifier> <name>opng_fsize_t</name></type> <name>idat_size_max</name> <init>= <expr><name>PNG_UINT_31_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><specifier>static</specifier> <type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>idat_size_max_string</name> <init>= <expr><literal type="string">"2GB"</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * The optimization process summary.
 */</comment>
<struct><specifier>static</specifier> struct <name>opng_summary_struct</name>
<block>{
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>file_count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>err_count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>fix_count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>snip_count</name></decl>;</decl_stmt>
}</block> <decl><name>summary</name></decl>;</struct>

<comment type="block">/*
 * The optimized image.
 */</comment>
<struct><specifier>static</specifier> struct <name>opng_image_struct</name>
<block>{
    <decl_stmt><decl><type><name>png_uint_32</name></type> <name>width</name></decl>;</decl_stmt>             <comment type="block">/* IHDR */</comment>
    <decl_stmt><decl><type><name>png_uint_32</name></type> <name>height</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>bit_depth</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>color_type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>compression_type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>filter_type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>interlace_type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>png_bytepp</name></type> <name>row_pointers</name></decl>;</decl_stmt>       <comment type="block">/* IDAT */</comment>
    <decl_stmt><decl><type><name>png_colorp</name></type> <name>palette</name></decl>;</decl_stmt>            <comment type="block">/* PLTE */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>num_palette</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>png_color_16p</name></type> <name>background_ptr</name></decl>;</decl_stmt>  <comment type="block">/* bKGD */</comment>
    <decl_stmt><decl><type><name>png_color_16</name></type> <name>background</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>png_uint_16p</name></type> <name>hist</name></decl>;</decl_stmt>             <comment type="block">/* hIST */</comment>
    <decl_stmt><decl><type><name>png_color_8p</name></type> <name>sig_bit_ptr</name></decl>;</decl_stmt>      <comment type="block">/* sBIT */</comment>
    <decl_stmt><decl><type><name>png_color_8</name></type> <name>sig_bit</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>png_bytep</name></type> <name>trans_alpha</name></decl>;</decl_stmt>         <comment type="block">/* tRNS */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>num_trans</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>png_color_16p</name></type> <name>trans_color_ptr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>png_color_16</name></type> <name>trans_color</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>png_unknown_chunkp</name></type> <name>unknowns</name></decl>;</decl_stmt>   <comment type="block">/* everything else */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>num_unknowns</name></decl>;</decl_stmt>
}</block> <decl><name>image</name></decl>;</struct>

<comment type="block">/*
 * The user options.
 */</comment>
<decl_stmt><decl><specifier>static</specifier> <type><name><name>struct</name> <name>opng_options</name></name></type> <name>options</name></decl>;</decl_stmt>


<comment type="block">/*
 * The user interface.
 */</comment>
<function_decl><specifier>static</specifier> <type><name>void</name></type> (<modifier>*</modifier><name>usr_printf</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><specifier>static</specifier> <type><name>void</name></type> (<modifier>*</modifier><name>usr_print_cntrl</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>cntrl_code</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><specifier>static</specifier> <type><name>void</name></type> (<modifier>*</modifier><name>usr_progress</name>)<parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>denom</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><specifier>static</specifier> <type><name>void</name></type> (<modifier>*</modifier><name>usr_panic</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * More global variables, for quick access and bonus style points.
 */</comment>
<decl_stmt><decl><specifier>static</specifier> <type><name>png_structp</name></type> <name>read_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><specifier>static</specifier> <type><name>png_infop</name></type> <name>read_info_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><specifier>static</specifier> <type><name>png_structp</name></type> <name>write_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><specifier>static</specifier> <type><name>png_infop</name></type> <name>write_info_ptr</name></decl>;</decl_stmt>


<comment type="block">/*
 * Internal debugging tool.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPNG_ENSURE</name><parameter_list>(<parameter><type><name>cond</name></type></parameter>, <parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>{ if (!(cond)) usr_panic(msg); }</cpp:value></cpp:define>  <comment type="block">/* strong check, no #ifdef's */</comment>


<comment type="block">/*
 * Size ratio display.
 */</comment>
<function><specifier>static</specifier> <type><name>void</name></type>
<name>opng_print_fsize_ratio</name><parameter_list>(<parameter><decl><type><name>opng_fsize_t</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>opng_fsize_t</name></type> <name>denom</name></decl></parameter>)</parameter_list>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPNG_FSIZE_MAX</name> <operator>&lt;=</operator> <name>ULONG_MAX</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RATIO_TYPE</name></cpp:macro> <cpp:value>struct opng_ulratio</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RATIO_CONV_FN</name></cpp:macro> <cpp:value>opng_ulratio_to_factor_string</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RATIO_TYPE</name></cpp:macro> <cpp:value>struct opng_ullratio</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RATIO_CONV_FN</name></cpp:macro> <cpp:value>opng_ullratio_to_factor_string</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RATIO_TYPE</name></type> <name>ratio</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>ratio</name><operator>.</operator><name>num</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ratio</name><operator>.</operator><name>denom</name></name> <operator>=</operator> <name>denom</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>RATIO_CONV_FN</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>ratio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>result</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"..."</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RATIO_TYPE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RATIO_CONV_FN</name></cpp:undef>
}</block></function>

<comment type="block">/*
 * Size change display.
 */</comment>
<function><specifier>static</specifier> <type><name>void</name></type>
<name>opng_print_fsize_difference</name><parameter_list>(<parameter><decl><type><name>opng_fsize_t</name></type> <name>init_size</name></decl></parameter>, <parameter><decl><type><name>opng_fsize_t</name></type> <name>final_size</name></decl></parameter>,
                            <parameter><decl><type><name>int</name></type> <name>show_ratio</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>opng_fsize_t</name></type> <name>difference</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>sign</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>init_size</name> <operator>&lt;=</operator> <name>final_size</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>difference</name> <operator>=</operator> <name>final_size</name> <operator>-</operator> <name>init_size</name></expr>;</expr_stmt>
    }</block></then>
    <else>else
    <block>{
        <expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>difference</name> <operator>=</operator> <name>init_size</name> <operator>-</operator> <name>final_size</name></expr>;</expr_stmt>
    }</block></else></if>

    <if>if <condition>(<expr><name>difference</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">"no change"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    }</block></then></if>
    <if>if <condition>(<expr><name>difference</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">"1 byte"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
    <else>else
        <block type="pseudo"><expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">"%"</literal> <name>OPNG_FSIZE_PRIu</name> <literal type="string">" bytes"</literal></expr></argument>, <argument><expr><name>difference</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    <if>if <condition>(<expr><name>show_ratio</name> <operator>&amp;&amp;</operator> <name>init_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">" = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>opng_print_fsize_ratio</name><argument_list>(<argument><expr><name>difference</name></expr></argument>, <argument><expr><name>init_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>sign</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">" increase"</literal></expr> </then><else>: <expr><literal type="string">" decrease"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
 * Image info display.
 */</comment>
<function><specifier>static</specifier> <type><name>void</name></type>
<name>opng_print_image_info</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>show_dim</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>show_depth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>show_type</name></decl></parameter>,
                      <parameter><decl><type><name>int</name></type> <name>show_interlaced</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><specifier>static</specifier> <type><specifier>const</specifier> <name>int</name></type> <name><name>type_channels</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>channels</name></decl>, <decl><type ref="prev"/><name>printed</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>printed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>show_dim</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>printed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">"%lux%lu pixels"</literal></expr></argument>,
                   <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>image</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>image</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr><name>show_depth</name></expr>)</condition><then>
    <block>{
        <if>if <condition>(<expr><name>printed</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>printed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>channels</name> <operator>=</operator> <name><name>type_channels</name><index>[<expr><name><name>image</name><operator>.</operator><name>color_type</name></name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>channels</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">"%dx%d bits/pixel"</literal></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>bit_depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <elseif>else <if>if <condition>(<expr><name><name>image</name><operator>.</operator><name>bit_depth</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">"%d bits/pixel"</literal></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>bit_depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
        <else>else
            <block type="pseudo"><expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">"1 bit/pixel"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    }</block></then></if>
    <if>if <condition>(<expr><name>show_type</name></expr>)</condition><then>
    <block>{
        <if>if <condition>(<expr><name>printed</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>printed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>image</name><operator>.</operator><name>color_type</name></name> <operator>&amp;</operator> <name>PNG_COLOR_MASK_PALETTE</name></expr>)</condition><then>
        <block>{
            <if>if <condition>(<expr><name><name>image</name><operator>.</operator><name>num_palette</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">"1 color"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
            <else>else
                <block type="pseudo"><expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">"%d colors"</literal></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>num_palette</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
            <if>if <condition>(<expr><name><name>image</name><operator>.</operator><name>num_trans</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">" (%d transparent)"</literal></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>num_trans</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">" in palette"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name><name>image</name><operator>.</operator><name>color_type</name></name> <operator>&amp;</operator> <name>PNG_COLOR_MASK_COLOR</name><operator>)</operator></expr> ?</condition><then>
                       <expr><literal type="string">"RGB"</literal></expr> </then><else>: <expr><literal type="string">"grayscale"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>image</name><operator>.</operator><name>color_type</name></name> <operator>&amp;</operator> <name>PNG_COLOR_MASK_ALPHA</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">"+alpha"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
            <elseif>else <if>if <condition>(<expr><name><name>image</name><operator>.</operator><name>trans_color_ptr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">"+transparency"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif></if>
        }</block></else></if>
    }</block></then></if>
    <if>if <condition>(<expr><name>show_interlaced</name></expr>)</condition><then>
    <block>{
        <if>if <condition>(<expr><name><name>image</name><operator>.</operator><name>interlace_type</name></name> <operator>!=</operator> <name>PNG_INTERLACE_NONE</name></expr>)</condition><then>
        <block>{
            <if>if <condition>(<expr><name>printed</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">"interlaced"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>
}</block></function>

<comment type="block">/*
 * Warning display.
 */</comment>
<function><specifier>static</specifier> <type><name>void</name></type>
<name>opng_print_warning</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>usr_print_cntrl</name><argument_list>(<argument><expr><literal type="char">'\v'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* VT: new paragraph */</comment>
    <expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">"Warning: %s\n"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
 * Error display.
 */</comment>
<function><specifier>static</specifier> <type><name>void</name></type>
<name>opng_print_error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>usr_print_cntrl</name><argument_list>(<argument><expr><literal type="char">'\v'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* VT: new paragraph */</comment>
    <expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">"Error: %s\n"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
 * Warning handler.
 */</comment>
<function><specifier>static</specifier> <type><name>void</name></type>
<name>opng_warning</name><parameter_list>(<parameter><decl><type><name>png_structp</name></type> <name>png_ptr</name></decl></parameter>, <parameter><decl><type><name>png_const_charp</name></type> <name>msg</name></decl></parameter>)</parameter_list>
<block>{
    <comment type="block">/* Error in input or output file; processing may continue. */</comment>
    <comment type="block">/* Recovery requires (re)compression of IDAT. */</comment>
    <if>if <condition>(<expr><name>png_ptr</name> <operator>==</operator> <name>read_ptr</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name><name>process</name><operator>.</operator><name>status</name></name> <operator>|=</operator> <operator>(</operator><name>INPUT_HAS_ERRORS</name> <operator>|</operator> <name>OUTPUT_NEEDS_NEW_IDAT</name><operator>)</operator></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><call><name>opng_print_warning</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
 * Error handler.
 */</comment>
<function><specifier>static</specifier> <type><name>void</name></type>
<name>opng_error</name><parameter_list>(<parameter><decl><type><name>png_structp</name></type> <name>png_ptr</name></decl></parameter>, <parameter><decl><type><name>png_const_charp</name></type> <name>msg</name></decl></parameter>)</parameter_list>
<block>{
    <comment type="block">/* Error in input or output file; processing must stop. */</comment>
    <comment type="block">/* Recovery requires (re)compression of IDAT. */</comment>
    <if>if <condition>(<expr><name>png_ptr</name> <operator>==</operator> <name>read_ptr</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name><name>process</name><operator>.</operator><name>status</name></name> <operator>|=</operator> <operator>(</operator><name>INPUT_HAS_ERRORS</name> <operator>|</operator> <name>OUTPUT_NEEDS_NEW_IDAT</name><operator>)</operator></expr>;</expr_stmt></block></then></if>
    <decl_stmt><decl><type><name>Throw</name></type> <name>msg</name></decl>;</decl_stmt>
}</block></function>

<comment type="block">/*
 * Memory deallocator.
 */</comment>
<function><specifier>static</specifier> <type><name>void</name></type>
<name>opng_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{
    <comment type="block">/* This deallocator must be compatible with libpng's memory allocation
     * routines, png_malloc() and png_free().
     * If those routines change, this one must be changed accordingly.
     */</comment>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
 * IDAT size checker.
 */</comment>
<function><specifier>static</specifier> <type><name>void</name></type>
<name>opng_check_idat_size</name><parameter_list>(<parameter><decl><type><name>opng_fsize_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>idat_size_max</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>Throw</name> <literal type="string">"IDAT sizes larger than the maximum chunk size "</literal>
              <literal type="string">"are currently unsupported"</literal></expr>;</expr_stmt></block></then></if>
}</block></function>

<comment type="block">/*
 * Chunk handler.
 */</comment>
<function><specifier>static</specifier> <type><name>void</name></type>
<name>opng_set_keep_unknown_chunk</name><parameter_list>(<parameter><decl><type><name>png_structp</name></type> <name>png_ptr</name></decl></parameter>,
                            <parameter><decl><type><name>int</name></type> <name>keep</name></decl></parameter>, <parameter><decl><type><name>png_bytep</name></type> <name>chunk_type</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>png_byte</name></type> <name><name>chunk_name</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

    <comment type="block">/* Call png_set_keep_unknown_chunks() once per each chunk type only. */</comment>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>chunk_name</name></expr></argument>, <argument><expr><name>chunk_type</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>chunk_name</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if>if <condition>(<expr><operator>!</operator><call><name>png_handle_as_unknown</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>chunk_name</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name>png_set_keep_unknown_chunks</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>keep</name></expr></argument>, <argument><expr><name>chunk_name</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
}</block></function>

<comment type="block">/*
 * Chunk categorization.
 */</comment>
<function><specifier>static</specifier> <type><name>int</name></type>
<name>opng_is_image_chunk</name><parameter_list>(<parameter><decl><type><name>png_bytep</name></type> <name>chunk_type</name></decl></parameter>)</parameter_list>
<block>{
    <if>if <condition>(<expr><operator>(</operator><name><name>chunk_type</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x20</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <comment type="block">/* Although tRNS is listed as ancillary in the PNG specification, it stores
     * alpha samples, which is critical information. For example, tRNS cannot
     * be generally ignored when rendering animations.
     * Operations claimed to be lossless must treat tRNS as a critical chunk.
     */</comment>
    <if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>chunk_type</name></expr></argument>, <argument><expr><name>sig_tRNS</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

<comment type="block">/*
 * Chunk categorization.
 */</comment>
<function><specifier>static</specifier> <type><name>int</name></type>
<name>opng_is_apng_chunk</name><parameter_list>(<parameter><decl><type><name>png_bytep</name></type> <name>chunk_type</name></decl></parameter>)</parameter_list>
<block>{
    <if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>chunk_type</name></expr></argument>, <argument><expr><name>sig_acTL</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
        <call><name>memcmp</name><argument_list>(<argument><expr><name>chunk_type</name></expr></argument>, <argument><expr><name>sig_fcTL</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
        <call><name>memcmp</name><argument_list>(<argument><expr><name>chunk_type</name></expr></argument>, <argument><expr><name>sig_fdAT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

<comment type="block">/*
 * Chunk filter.
 */</comment>
<function><specifier>static</specifier> <type><name>int</name></type>
<name>opng_allow_chunk</name><parameter_list>(<parameter><decl><type><name>png_bytep</name></type> <name>chunk_type</name></decl></parameter>)</parameter_list>
<block>{
    <comment type="block">/* Always allow critical chunks and tRNS. */</comment>
    <if>if <condition>(<expr><call><name>opng_is_image_chunk</name><argument_list>(<argument><expr><name>chunk_type</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <comment type="block">/* Block all the other chunks if requested. */</comment>
    <if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>strip_all</name></name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
    <comment type="block">/* Always block the digital signature chunks. */</comment>
    <if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>chunk_type</name></expr></argument>, <argument><expr><name>sig_dSIG</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
    <comment type="block">/* Block the APNG chunks when snipping. */</comment>
    <if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>snip</name></name> <operator>&amp;&amp;</operator> <call><name>opng_is_apng_chunk</name><argument_list>(<argument><expr><name>chunk_type</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
    <comment type="block">/* Allow all the other chunks. */</comment>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
}</block></function>

<comment type="block">/*
 * Chunk handler.
 */</comment>
<function><specifier>static</specifier> <type><name>void</name></type>
<name>opng_handle_chunk</name><parameter_list>(<parameter><decl><type><name>png_structp</name></type> <name>png_ptr</name></decl></parameter>, <parameter><decl><type><name>png_bytep</name></type> <name>chunk_type</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>keep</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>opng_is_image_chunk</name><argument_list>(<argument><expr><name>chunk_type</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block type="pseudo"><return>return;</return></block></then></if>

    <if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>strip_all</name></name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name><name>process</name><operator>.</operator><name>status</name></name> <operator>|=</operator> <name>INPUT_HAS_STRIPPED_DATA</name> <operator>|</operator> <name>INPUT_HAS_JUNK</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>opng_set_keep_unknown_chunk</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>,
                                    <argument><expr><name>PNG_HANDLE_CHUNK_NEVER</name></expr></argument>, <argument><expr><name>chunk_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    }</block></then></if>

    <comment type="block">/* Let libpng handle bKGD, hIST and sBIT. */</comment>
    <if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>chunk_type</name></expr></argument>, <argument><expr><name>sig_bKGD</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
        <call><name>memcmp</name><argument_list>(<argument><expr><name>chunk_type</name></expr></argument>, <argument><expr><name>sig_hIST</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
        <call><name>memcmp</name><argument_list>(<argument><expr><name>chunk_type</name></expr></argument>, <argument><expr><name>sig_sBIT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><return>return;</return></block></then></if>

    <comment type="block">/* Everything else is handled as unknown by libpng. */</comment>
    <expr_stmt><expr><name>keep</name> <operator>=</operator> <name>PNG_HANDLE_CHUNK_ALWAYS</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>chunk_type</name></expr></argument>, <argument><expr><name>sig_dSIG</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
    <block>{
        <comment type="block">/* Recognize dSIG, but let libpng handle it as unknown. */</comment>
        <expr_stmt><expr><name><name>process</name><operator>.</operator><name>status</name></name> <operator>|=</operator> <name>INPUT_HAS_DIGITAL_SIGNATURE</name></expr>;</expr_stmt>
    }</block></then>
    <elseif>else <if>if <condition>(<expr><call><name>opng_is_apng_chunk</name><argument_list>(<argument><expr><name>chunk_type</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
        <comment type="block">/* Recognize APNG, but let libpng handle it as unknown. */</comment>
        <expr_stmt><expr><name><name>process</name><operator>.</operator><name>status</name></name> <operator>|=</operator> <name>INPUT_HAS_APNG</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>chunk_type</name></expr></argument>, <argument><expr><name>sig_fdAT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>process</name><operator>.</operator><name>status</name></name> <operator>|=</operator> <name>INPUT_HAS_MULTIPLE_IMAGES</name></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>snip</name></name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name><name>process</name><operator>.</operator><name>status</name></name> <operator>|=</operator> <name>INPUT_HAS_JUNK</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>keep</name> <operator>=</operator> <name>PNG_HANDLE_CHUNK_NEVER</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if></elseif></if>
    <expr_stmt><expr><call><name>opng_set_keep_unknown_chunk</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>keep</name></expr></argument>, <argument><expr><name>chunk_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
 * Initialization for input handler.
 */</comment>
<function><specifier>static</specifier> <type><name>void</name></type>
<name>opng_init_read_data</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{
    <comment type="block">/* The relevant process data members are set to zero,
     * and nothing else needs to be done at this moment.
     */</comment>
}</block></function>

<comment type="block">/*
 * Initialization for output handler.
 */</comment>
<function><specifier>static</specifier> <type><name>void</name></type>
<name>opng_init_write_data</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name><name>process</name><operator>.</operator><name>out_file_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>process</name><operator>.</operator><name>out_plte_trns_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>process</name><operator>.</operator><name>out_idat_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
 * Input handler.
 */</comment>
<function><specifier>static</specifier> <type><name>void</name></type>
<name>opng_read_data</name><parameter_list>(<parameter><decl><type><name>png_structp</name></type> <name>png_ptr</name></decl></parameter>, <parameter><decl><type><name>png_bytep</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><operator>(</operator><name>FILE</name> <operator>*</operator><operator>)</operator><call><name>png_get_io_ptr</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>io_state</name> <init>= <expr><call><name>pngx_get_io_state</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>io_state_loc</name> <init>= <expr><name>io_state</name> <operator>&amp;</operator> <name>PNGX_IO_MASK_LOC</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>png_bytep</name></type> <name>chunk_sig</name></decl>;</decl_stmt>

    <comment type="block">/* Read the data. */</comment>
    <if>if <condition>(<expr><call><name>fread</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>length</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name>png_error</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>,
                  <argument><expr><literal type="string">"Can't read the input file or unexpected end of file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

    <if>if <condition>(<expr><name><name>process</name><operator>.</operator><name>in_file_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>  <comment type="block">/* first piece of PNG data */</comment>
    <block>{
        <expr_stmt><expr><call><name>OPNG_ENSURE</name><argument_list>(<argument><expr><name>length</name> <operator>==</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"PNG I/O must start with the first 8 bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>process</name><operator>.</operator><name>in_datastream_offset</name></name> <operator>=</operator> <call><name>opng_ftello</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>process</name><operator>.</operator><name>status</name></name> <operator>|=</operator> <name>INPUT_HAS_PNG_DATASTREAM</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>io_state_loc</name> <operator>==</operator> <name>PNGX_IO_SIGNATURE</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>process</name><operator>.</operator><name>status</name></name> <operator>|=</operator> <name>INPUT_HAS_PNG_SIGNATURE</name></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name><name>process</name><operator>.</operator><name>in_datastream_offset</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>process</name><operator>.</operator><name>status</name></name> <operator>|=</operator> <name>INPUT_IS_PNG_FILE</name></expr>;</expr_stmt></block></then>
        <elseif>else <if>if <condition>(<expr><name><name>process</name><operator>.</operator><name>in_datastream_offset</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>png_error</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>,
                      <argument><expr><literal type="string">"Can't get the file-position indicator in input file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif></if>
        <expr_stmt><expr><name><name>process</name><operator>.</operator><name>in_file_size</name></name> <operator>=</operator> <operator>(</operator><name>opng_fsize_t</name><operator>)</operator><name><name>process</name><operator>.</operator><name>in_datastream_offset</name></name></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name><name>process</name><operator>.</operator><name>in_file_size</name></name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>

    <comment type="block">/* Handle the OptiPNG-specific events. */</comment>
    <expr_stmt><expr><call><name>OPNG_ENSURE</name><argument_list>(<argument><expr><operator>(</operator><name>io_state</name> <operator>&amp;</operator> <name>PNGX_IO_READING</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>io_state_loc</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>,
                <argument><expr><literal type="string">"Incorrect info in png_ptr-&gt;io_state"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>io_state_loc</name> <operator>==</operator> <name>PNGX_IO_CHUNK_HDR</name></expr>)</condition><then>
    <block>{
        <comment type="block">/* In libpng 1.4.x and later, the chunk length and the chunk name
         * are serialized in a single operation. This is also ensured by
         * the opngio add-on for libpng 1.2.x and earlier.
         */</comment>
        <expr_stmt><expr><call><name>OPNG_ENSURE</name><argument_list>(<argument><expr><name>length</name> <operator>==</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"Reading chunk header, expecting 8 bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>chunk_sig</name> <operator>=</operator> <name>data</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>chunk_sig</name></expr></argument>, <argument><expr><name>sig_IDAT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>OPNG_ENSURE</name><argument_list>(<argument><expr><name>png_ptr</name> <operator>==</operator> <name>read_ptr</name></expr></argument>, <argument><expr><literal type="string">"Incorrect I/O handler setup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name>png_get_rows</name><argument_list>(<argument><expr><name>read_ptr</name></expr></argument>, <argument><expr><name>read_info_ptr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><then>  <comment type="block">/* 1st IDAT */</comment>
            <block>{
                <expr_stmt><expr><call><name>OPNG_ENSURE</name><argument_list>(<argument><expr><name><name>process</name><operator>.</operator><name>in_idat_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>,
                            <argument><expr><literal type="string">"Found IDAT with no rows"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="block">/* Allocate the rows here, bypassing libpng.
                 * This allows to initialize the contents and perform recovery
                 * in case of a premature EOF.
                 */</comment>
                <if>if <condition>(<expr><call><name>png_get_image_height</name><argument_list>(<argument><expr><name>read_ptr</name></expr></argument>, <argument><expr><name>read_info_ptr</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
                    <block type="pseudo"><return>return;</return></block></then></if>  <comment type="block">/* premature IDAT; an error will occur later */</comment>
                <expr_stmt><expr><call><name>OPNG_ENSURE</name><argument_list>(<argument><expr><call><name>pngx_malloc_rows</name><argument_list>(<argument><expr><name>read_ptr</name></expr></argument>, <argument><expr><name>read_info_ptr</name></expr></argument>,
                                             <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></argument>,
                            <argument><expr><literal type="string">"Failed allocation of image rows; "</literal>
                            <literal type="string">"unsafe libpng allocator"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>png_data_freer</name><argument_list>(<argument><expr><name>read_ptr</name></expr></argument>, <argument><expr><name>read_info_ptr</name></expr></argument>,
                               <argument><expr><name>PNG_USER_WILL_FREE_DATA</name></expr></argument>, <argument><expr><name>PNG_FREE_ROWS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <comment type="block">/* There is split IDAT overhead. Join IDATs. */</comment>
                <expr_stmt><expr><name><name>process</name><operator>.</operator><name>status</name></name> <operator>|=</operator> <name>INPUT_HAS_JUNK</name></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><name><name>process</name><operator>.</operator><name>in_idat_size</name></name> <operator>+=</operator> <call><name>png_get_uint_32</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <elseif>else <if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>chunk_sig</name></expr></argument>, <argument><expr><name>sig_PLTE</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
                 <call><name>memcmp</name><argument_list>(<argument><expr><name>chunk_sig</name></expr></argument>, <argument><expr><name>sig_tRNS</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block>{
            <comment type="block">/* Add the chunk overhead (header + CRC) to the data size. */</comment>
            <expr_stmt><expr><name><name>process</name><operator>.</operator><name>in_plte_trns_size</name></name> <operator>+=</operator> <call><name>png_get_uint_32</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">12</literal></expr>;</expr_stmt>
        }</block></then></if></elseif>
        <else>else
            <block type="pseudo"><expr_stmt><expr><call><name>opng_handle_chunk</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>chunk_sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    }</block></then>
    <elseif>else <if>if <condition>(<expr><name>io_state_loc</name> <operator>==</operator> <name>PNGX_IO_CHUNK_CRC</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>OPNG_ENSURE</name><argument_list>(<argument><expr><name>length</name> <operator>==</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"Reading chunk CRC, expecting 4 bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></elseif></if>
}</block></function>

<comment type="block">/*
 * Output handler.
 */</comment>
<function><specifier>static</specifier> <type><name>void</name></type>
<name>opng_write_data</name><parameter_list>(<parameter><decl><type><name>png_structp</name></type> <name>png_ptr</name></decl></parameter>, <parameter><decl><type><name>png_bytep</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><specifier>static</specifier> <type><name>int</name></type> <name>allow_crt_chunk</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>static</specifier> <type><name>int</name></type> <name>crt_chunk_is_idat</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>static</specifier> <type><name>opng_foffset_t</name></type> <name>crt_idat_offset</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>static</specifier> <type><name>opng_fsize_t</name></type> <name>crt_idat_size</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>static</specifier> <type><name>png_uint_32</name></type> <name>crt_idat_crc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><operator>(</operator><name>FILE</name> <operator>*</operator><operator>)</operator><call><name>png_get_io_ptr</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>io_state</name> <init>= <expr><call><name>pngx_get_io_state</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>io_state_loc</name> <init>= <expr><name>io_state</name> <operator>&amp;</operator> <name>PNGX_IO_MASK_LOC</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>png_bytep</name></type> <name>chunk_sig</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>png_byte</name></type> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>OPNG_ENSURE</name><argument_list>(<argument><expr><operator>(</operator><name>io_state</name> <operator>&amp;</operator> <name>PNGX_IO_WRITING</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>io_state_loc</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>,
                <argument><expr><literal type="string">"Incorrect info in png_ptr-&gt;io_state"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Handle the OptiPNG-specific events. */</comment>
    <if>if <condition>(<expr><name>io_state_loc</name> <operator>==</operator> <name>PNGX_IO_CHUNK_HDR</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>OPNG_ENSURE</name><argument_list>(<argument><expr><name>length</name> <operator>==</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"Writing chunk header, expecting 8 bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>chunk_sig</name> <operator>=</operator> <name>data</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>allow_crt_chunk</name> <operator>=</operator> <call><name>opng_allow_chunk</name><argument_list>(<argument><expr><name>chunk_sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>chunk_sig</name></expr></argument>, <argument><expr><name>sig_IDAT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>crt_chunk_is_idat</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>process</name><operator>.</operator><name>out_idat_size</name></name> <operator>+=</operator> <call><name>png_get_uint_32</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/* Abandon the trial if IDAT is bigger than the maximum allowed. */</comment>
            <if>if <condition>(<expr><name>stream</name> <operator>==</operator> <name>NULL</name></expr>)</condition><then>
            <block>{
                <if>if <condition>(<expr><name><name>process</name><operator>.</operator><name>out_idat_size</name></name> <operator>&gt;</operator> <name><name>process</name><operator>.</operator><name>max_idat_size</name></name></expr>)</condition><then>
                    <block type="pseudo"><decl_stmt><decl><type><name>Throw</name></type> <name>NULL</name></decl>;</decl_stmt></block></then></if>  <comment type="block">/* early interruption, not an error */</comment>
            }</block></then></if>
        }</block></then>
        <else>else  <comment type="block">/* not IDAT */</comment>
        <block>{
            <expr_stmt><expr><name>crt_chunk_is_idat</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>chunk_sig</name></expr></argument>, <argument><expr><name>sig_PLTE</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
                <call><name>memcmp</name><argument_list>(<argument><expr><name>chunk_sig</name></expr></argument>, <argument><expr><name>sig_tRNS</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block>{
                <comment type="block">/* Add the chunk overhead (header + CRC) to the data size. */</comment>
                <expr_stmt><expr><name><name>process</name><operator>.</operator><name>out_plte_trns_size</name></name> <operator>+=</operator> <call><name>png_get_uint_32</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">12</literal></expr>;</expr_stmt>
            }</block></then></if>
        }</block></else></if>
    }</block></then>
    <elseif>else <if>if <condition>(<expr><name>io_state_loc</name> <operator>==</operator> <name>PNGX_IO_CHUNK_CRC</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>OPNG_ENSURE</name><argument_list>(<argument><expr><name>length</name> <operator>==</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"Writing chunk CRC, expecting 4 bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></elseif></if>

    <comment type="block">/* Exit early if this is only a trial. */</comment>
    <if>if <condition>(<expr><name>stream</name> <operator>==</operator> <name>NULL</name></expr>)</condition><then>
        <block type="pseudo"><return>return;</return></block></then></if>

    <comment type="block">/* Continue only if the current chunk type is allowed. */</comment>
    <if>if <condition>(<expr><name>io_state_loc</name> <operator>!=</operator> <name>PNGX_IO_SIGNATURE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>allow_crt_chunk</name></expr>)</condition><then>
        <block type="pseudo"><return>return;</return></block></then></if>

    <comment type="block">/* Here comes an elaborate way of writing the data, in which all IDATs
     * are joined into a single chunk.
     * Normally, the user-supplied I/O routines are not so complicated.
     */</comment>
    <switch>switch <condition>(<expr><name>io_state_loc</name></expr>)</condition>
    <block>{
    <case>case <expr><name>PNGX_IO_CHUNK_HDR</name></expr>:</case>
        <if>if <condition>(<expr><name>crt_chunk_is_idat</name></expr>)</condition><then>
        <block>{
            <if>if <condition>(<expr><name>crt_idat_offset</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block>{
                <comment type="block">/* This is the header of the first IDAT. */</comment>
                <expr_stmt><expr><name>crt_idat_offset</name> <operator>=</operator> <call><name>opng_ftello</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="block">/* Try guessing the size of the final (joined) IDAT. */</comment>
                <if>if <condition>(<expr><name><name>process</name><operator>.</operator><name>best_idat_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
                <block>{
                    <comment type="block">/* The guess is expected to be right. */</comment>
                    <expr_stmt><expr><name>crt_idat_size</name> <operator>=</operator> <name><name>process</name><operator>.</operator><name>best_idat_size</name></name></expr>;</expr_stmt>
                }</block></then>
                <else>else
                <block>{
                    <comment type="block">/* The guess could be wrong.
                     * The size of the final IDAT will be revised.
                     */</comment>
                    <expr_stmt><expr><name>crt_idat_size</name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><call><name>png_save_uint_32</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>png_uint_32</name><operator>)</operator><name>crt_idat_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="block">/* Start computing the CRC of the final IDAT. */</comment>
                <expr_stmt><expr><name>crt_idat_crc</name> <operator>=</operator> <call><name>crc32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sig_IDAT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <comment type="block">/* This is not the first IDAT. Do not write its header. */</comment>
                <return>return;</return>
            }</block></else></if>
        }</block></then>
        <else>else
        <block>{
            <if>if <condition>(<expr><name>crt_idat_offset</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block>{
                <comment type="block">/* This is the header of the first chunk after IDAT.
                 * Finalize IDAT before resuming the normal operation.
                 */</comment>
                <expr_stmt><expr><call><name>png_save_uint_32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>crt_idat_crc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><call><name>fwrite</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>io_state</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if>  <comment type="block">/* error */</comment>
                <expr_stmt><expr><name><name>process</name><operator>.</operator><name>out_file_size</name></name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
                <if>if <condition>(<expr><name><name>process</name><operator>.</operator><name>out_idat_size</name></name> <operator>!=</operator> <name>crt_idat_size</name></expr>)</condition><then>
                <block>{
                    <comment type="block">/* The IDAT size has not been guessed correctly.
                     * It must be updated in a non-streamable way.
                     */</comment>
                    <expr_stmt><expr><call><name>OPNG_ENSURE</name><argument_list>(<argument><expr><name><name>process</name><operator>.</operator><name>best_idat_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>,
                                <argument><expr><literal type="string">"Wrong guess of the output IDAT size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>opng_check_idat_size</name><argument_list>(<argument><expr><name><name>process</name><operator>.</operator><name>out_idat_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>png_save_uint_32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>png_uint_32</name><operator>)</operator><name><name>process</name><operator>.</operator><name>out_idat_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><call><name>opng_fwriteo</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>crt_idat_offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>,
                                     <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><name>io_state</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if>  <comment type="block">/* error */</comment>
                }</block></then></if>
                <if>if <condition>(<expr><name>io_state</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><call><name>png_error</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><literal type="string">"Can't finalize IDAT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                <expr_stmt><expr><name>crt_idat_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            }</block></then></if>
        }</block></else></if>
        <break>break;</break>
    <case>case <expr><name>PNGX_IO_CHUNK_DATA</name></expr>:</case>
        <if>if <condition>(<expr><name>crt_chunk_is_idat</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>crt_idat_crc</name> <operator>=</operator> <call><name>crc32</name><argument_list>(<argument><expr><name>crt_idat_crc</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <break>break;</break>
    <case>case <expr><name>PNGX_IO_CHUNK_CRC</name></expr>:</case>
        <if>if <condition>(<expr><name>crt_chunk_is_idat</name></expr>)</condition><then>
        <block>{
            <comment type="block">/* Defer writing until the first non-IDAT occurs. */</comment>
            <return>return;</return>
        }</block></then></if>
        <break>break;</break>
    }</block></switch>

    <comment type="block">/* Write the data. */</comment>
    <if>if <condition>(<expr><call><name>fwrite</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>length</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name>png_error</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><literal type="string">"Can't write the output file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name><name>process</name><operator>.</operator><name>out_file_size</name></name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
 * Image info initialization.
 */</comment>
<function><specifier>static</specifier> <type><name>void</name></type>
<name>opng_clear_image_info</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>image</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
 * Image info transfer.
 */</comment>
<function><specifier>static</specifier> <type><name>void</name></type>
<name>opng_load_image_info</name><parameter_list>(<parameter><decl><type><name>png_structp</name></type> <name>png_ptr</name></decl></parameter>, <parameter><decl><type><name>png_infop</name></type> <name>info_ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>load_meta</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>image</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>png_get_IHDR</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>info_ptr</name></expr></argument>,
                 <argument><expr><operator>&amp;</operator><name><name>image</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>image</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>image</name><operator>.</operator><name>bit_depth</name></name></expr></argument>,
                 <argument><expr><operator>&amp;</operator><name><name>image</name><operator>.</operator><name>color_type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>image</name><operator>.</operator><name>interlace_type</name></name></expr></argument>,
                 <argument><expr><operator>&amp;</operator><name><name>image</name><operator>.</operator><name>compression_type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>image</name><operator>.</operator><name>filter_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>image</name><operator>.</operator><name>row_pointers</name></name> <operator>=</operator> <call><name>png_get_rows</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>info_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>png_get_PLTE</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>info_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>image</name><operator>.</operator><name>palette</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>image</name><operator>.</operator><name>num_palette</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Transparency is not considered metadata, although tRNS is ancillary.
     * See the comment in opng_is_image_chunk() above.
     */</comment>
    <if>if <condition>(<expr><call><name>png_get_tRNS</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>info_ptr</name></expr></argument>,
                     <argument><expr><operator>&amp;</operator><name><name>image</name><operator>.</operator><name>trans_alpha</name></name></expr></argument>,
                     <argument><expr><operator>&amp;</operator><name><name>image</name><operator>.</operator><name>num_trans</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>image</name><operator>.</operator><name>trans_color_ptr</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
        <comment type="block">/* Double copying (pointer + value) is necessary here
         * due to an inconsistency in the libpng design.
         */</comment>
        <if>if <condition>(<expr><name><name>image</name><operator>.</operator><name>trans_color_ptr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name><name>image</name><operator>.</operator><name>trans_color</name></name> <operator>=</operator> <operator>*</operator><name><name>image</name><operator>.</operator><name>trans_color_ptr</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>image</name><operator>.</operator><name>trans_color_ptr</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>image</name><operator>.</operator><name>trans_color</name></name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

    <if>if <condition>(<expr><operator>!</operator><name>load_meta</name></expr>)</condition><then>
        <block type="pseudo"><return>return;</return></block></then></if>

    <if>if <condition>(<expr><call><name>png_get_bKGD</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>info_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>image</name><operator>.</operator><name>background_ptr</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
        <comment type="block">/* Same problem as in tRNS. */</comment>
        <expr_stmt><expr><name><name>image</name><operator>.</operator><name>background</name></name> <operator>=</operator> <operator>*</operator><name><name>image</name><operator>.</operator><name>background_ptr</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>image</name><operator>.</operator><name>background_ptr</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>image</name><operator>.</operator><name>background</name></name></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name>png_get_hIST</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>info_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>image</name><operator>.</operator><name>hist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>png_get_sBIT</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>info_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>image</name><operator>.</operator><name>sig_bit_ptr</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
        <comment type="block">/* Same problem as in tRNS. */</comment>
        <expr_stmt><expr><name><name>image</name><operator>.</operator><name>sig_bit</name></name> <operator>=</operator> <operator>*</operator><name><name>image</name><operator>.</operator><name>sig_bit_ptr</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>image</name><operator>.</operator><name>sig_bit_ptr</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>image</name><operator>.</operator><name>sig_bit</name></name></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name><name>image</name><operator>.</operator><name>num_unknowns</name></name> <operator>=</operator>
        <call><name>png_get_unknown_chunks</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>info_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>image</name><operator>.</operator><name>unknowns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
 * Image info transfer.
 */</comment>
<function><specifier>static</specifier> <type><name>void</name></type>
<name>opng_store_image_info</name><parameter_list>(<parameter><decl><type><name>png_structp</name></type> <name>png_ptr</name></decl></parameter>, <parameter><decl><type><name>png_infop</name></type> <name>info_ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>store_meta</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>OPNG_ENSURE</name><argument_list>(<argument><expr><name><name>image</name><operator>.</operator><name>row_pointers</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"No info in image"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>png_set_IHDR</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>info_ptr</name></expr></argument>,
                 <argument><expr><name><name>image</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>bit_depth</name></name></expr></argument>,
                 <argument><expr><name><name>image</name><operator>.</operator><name>color_type</name></name></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>interlace_type</name></name></expr></argument>,
                 <argument><expr><name><name>image</name><operator>.</operator><name>compression_type</name></name></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>filter_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>png_set_rows</name><argument_list>(<argument><expr><name>write_ptr</name></expr></argument>, <argument><expr><name>write_info_ptr</name></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>row_pointers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>image</name><operator>.</operator><name>palette</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name>png_set_PLTE</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>info_ptr</name></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>palette</name></name></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>num_palette</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <comment type="block">/* Transparency is not considered metadata, although tRNS is ancillary.
     * See the comment in opng_is_image_chunk() above.
     */</comment>
    <if>if <condition>(<expr><name><name>image</name><operator>.</operator><name>trans_alpha</name></name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name><name>image</name><operator>.</operator><name>trans_color_ptr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name>png_set_tRNS</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>info_ptr</name></expr></argument>,
                     <argument><expr><name><name>image</name><operator>.</operator><name>trans_alpha</name></name></expr></argument>,
                     <argument><expr><name><name>image</name><operator>.</operator><name>num_trans</name></name></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>trans_color_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

    <if>if <condition>(<expr><operator>!</operator><name>store_meta</name></expr>)</condition><then>
        <block type="pseudo"><return>return;</return></block></then></if>

    <if>if <condition>(<expr><name><name>image</name><operator>.</operator><name>background_ptr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name>png_set_bKGD</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>info_ptr</name></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>background_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <if>if <condition>(<expr><name><name>image</name><operator>.</operator><name>hist</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name>png_set_hIST</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>info_ptr</name></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>hist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <if>if <condition>(<expr><name><name>image</name><operator>.</operator><name>sig_bit_ptr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name>png_set_sBIT</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>info_ptr</name></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>sig_bit_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <if>if <condition>(<expr><name><name>image</name><operator>.</operator><name>num_unknowns</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>png_set_unknown_chunks</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>info_ptr</name></expr></argument>,
                               <argument><expr><name><name>image</name><operator>.</operator><name>unknowns</name></name></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>num_unknowns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* This should be handled by libpng. */</comment>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>image</name><operator>.</operator><name>num_unknowns</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><call><name>png_set_unknown_chunk_location</name><argument_list>(<argument><expr><name>png_ptr</name></expr></argument>, <argument><expr><name>info_ptr</name></expr></argument>,
                                           <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>unknowns</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    }</block></then></if>
}</block></function>

<comment type="block">/*
 * Image info destruction.
 */</comment>
<function><specifier>static</specifier> <type><name>void</name></type>
<name>opng_destroy_image_info</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>png_uint_32</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>image</name><operator>.</operator><name>row_pointers</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><then>
        <block type="pseudo"><return>return;</return></block></then></if>  <comment type="block">/* nothing to clean up */</comment>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>image</name><operator>.</operator><name>height</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><call><name>opng_free</name><argument_list>(<argument><expr><name><name>image</name><operator>.</operator><name>row_pointers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><call><name>opng_free</name><argument_list>(<argument><expr><name><name>image</name><operator>.</operator><name>row_pointers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>opng_free</name><argument_list>(<argument><expr><name><name>image</name><operator>.</operator><name>palette</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>opng_free</name><argument_list>(<argument><expr><name><name>image</name><operator>.</operator><name>trans_alpha</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>opng_free</name><argument_list>(<argument><expr><name><name>image</name><operator>.</operator><name>hist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>image</name><operator>.</operator><name>num_unknowns</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><call><name>opng_free</name><argument_list>(<argument><expr><name><name>image</name><operator>.</operator><name>unknowns</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><call><name>opng_free</name><argument_list>(<argument><expr><name><name>image</name><operator>.</operator><name>unknowns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* DO NOT deallocate background_ptr, sig_bit_ptr, trans_color_ptr.
     * See the comments regarding double copying inside opng_load_image_info().
     */</comment>

    <comment type="block">/* Clear the space here and do not worry about double-deallocation issues
     * that might arise later on.
     */</comment>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>image</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
 * Image file reading.
 */</comment>
<function><specifier>static</specifier> <type><name>void</name></type>
<name>opng_read_file</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>infile</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>num_img</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>png_uint_32</name></type> <name>reductions</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>volatile</specifier></type> <name>err_msg</name></decl>;</decl_stmt>  <comment type="block">/* volatile is required by cexcept */</comment>

    <macro><name>Try</name></macro>
    <block>{
        <expr_stmt><expr><name>read_ptr</name> <operator>=</operator> <call><name>png_create_read_struct</name><argument_list>(<argument><expr><name>PNG_LIBPNG_VER_STRING</name></expr></argument>,
                                          <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>opng_error</name></expr></argument>, <argument><expr><name>opng_warning</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>read_info_ptr</name> <operator>=</operator> <call><name>png_create_info_struct</name><argument_list>(<argument><expr><name>read_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>read_info_ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>Throw</name> <literal type="string">"Out of memory"</literal></expr>;</expr_stmt></block></then></if>

        <comment type="block">/* Override the default libpng settings. */</comment>
        <expr_stmt><expr><call><name>png_set_keep_unknown_chunks</name><argument_list>(<argument><expr><name>read_ptr</name></expr></argument>,
                                    <argument><expr><name>PNG_HANDLE_CHUNK_ALWAYS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>png_set_user_limits</name><argument_list>(<argument><expr><name>read_ptr</name></expr></argument>, <argument><expr><name>PNG_UINT_31_MAX</name></expr></argument>, <argument><expr><name>PNG_UINT_31_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Read the input image file. */</comment>
        <expr_stmt><expr><call><name>opng_init_read_data</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pngx_set_read_fn</name><argument_list>(<argument><expr><name>read_ptr</name></expr></argument>, <argument><expr><name>infile</name></expr></argument>, <argument><expr><name>opng_read_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>fmt_name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>num_img</name> <operator>=</operator> <call><name>pngx_read_image</name><argument_list>(<argument><expr><name>read_ptr</name></expr></argument>, <argument><expr><name>read_info_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>num_img</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>Throw</name> <literal type="string">"Unrecognized image file format"</literal></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name>num_img</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>process</name><operator>.</operator><name>status</name></name> <operator>|=</operator> <name>INPUT_HAS_MULTIPLE_IMAGES</name></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><operator>(</operator><name><name>process</name><operator>.</operator><name>status</name></name> <operator>&amp;</operator> <name>INPUT_IS_PNG_FILE</name><operator>)</operator> <operator>&amp;&amp;</operator>
            <operator>(</operator><name><name>process</name><operator>.</operator><name>status</name></name> <operator>&amp;</operator> <name>INPUT_HAS_MULTIPLE_IMAGES</name><operator>)</operator></expr>)</condition><then>
        <block>{
            <comment type="block">/* pngxtern can't distinguish between APNG and proper PNG. */</comment>
            <expr_stmt><expr><name>fmt_name</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>process</name><operator>.</operator><name>status</name></name> <operator>&amp;</operator> <name>INPUT_HAS_PNG_SIGNATURE</name><operator>)</operator></expr> ?</condition><then>
                       <expr><literal type="string">"APNG"</literal></expr> </then><else>: <expr><literal type="string">"APNG datastream"</literal></expr></else></ternary></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>OPNG_ENSURE</name><argument_list>(<argument><expr><name>fmt_name</name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"No format name from pngxtern"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name><name>process</name><operator>.</operator><name>in_file_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block>{
            <if>if <condition>(<expr><call><name>opng_fgetsize</name><argument_list>(<argument><expr><name>infile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>process</name><operator>.</operator><name>in_file_size</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name>opng_print_warning</name><argument_list>(<argument><expr><literal type="string">"Can't get the correct file size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>process</name><operator>.</operator><name>in_file_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>

        <expr_stmt><expr><name>err_msg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>  <comment type="block">/* everything is ok */</comment>
    }</block>
    <macro><name>Catch</name> <argument_list>(<argument>err_msg</argument>)</argument_list></macro>
    <block>{
        <comment type="block">/* If the critical info has been loaded, treat all errors as warnings.
         * This enables a more advanced data recovery.
         */</comment>
        <if>if <condition>(<expr><call><name>opng_validate_image</name><argument_list>(<argument><expr><name>read_ptr</name></expr></argument>, <argument><expr><name>read_info_ptr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>png_warning</name><argument_list>(<argument><expr><name>read_ptr</name></expr></argument>, <argument><expr><name>err_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>err_msg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block>

    <macro><name>Try</name></macro>
    <block>{
        <if>if <condition>(<expr><name>err_msg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><then>
            <block type="pseudo"><decl_stmt><decl><type><name>Throw</name></type> <name>err_msg</name></decl>;</decl_stmt></block></then></if>

        <comment type="block">/* Display format and image information. */</comment>
        <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>fmt_name</name></expr></argument>, <argument><expr><literal type="string">"PNG"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">"Importing %s"</literal></expr></argument>, <argument><expr><name>fmt_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>process</name><operator>.</operator><name>status</name></name> <operator>&amp;</operator> <name>INPUT_HAS_MULTIPLE_IMAGES</name></expr>)</condition><then>
            <block>{
                <if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>process</name><operator>.</operator><name>status</name></name> <operator>&amp;</operator> <name>INPUT_IS_PNG_FILE</name><operator>)</operator></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">" (multi-image or animation)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                <if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>snip</name></name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">"; snipping..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
            }</block></then></if>
            <expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>opng_load_image_info</name><argument_list>(<argument><expr><name>read_ptr</name></expr></argument>, <argument><expr><name>read_info_ptr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>opng_print_image_info</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Choose the applicable image reductions. */</comment>
        <expr_stmt><expr><name>reductions</name> <operator>=</operator> <name>OPNG_REDUCE_ALL</name> <operator>&amp;</operator> <operator>~</operator><name>OPNG_REDUCE_METADATA</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>nb</name></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>reductions</name> <operator>&amp;=</operator> <operator>~</operator><name>OPNG_REDUCE_BIT_DEPTH</name></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>nc</name></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>reductions</name> <operator>&amp;=</operator> <operator>~</operator><name>OPNG_REDUCE_COLOR_TYPE</name></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>np</name></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>reductions</name> <operator>&amp;=</operator> <operator>~</operator><name>OPNG_REDUCE_PALETTE</name></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>nz</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>process</name><operator>.</operator><name>status</name></name> <operator>&amp;</operator> <name>INPUT_HAS_PNG_DATASTREAM</name><operator>)</operator></expr>)</condition><then>
        <block>{
            <comment type="block">/* Do not reduce files with PNG datastreams under -nz. */</comment>
            <expr_stmt><expr><name>reductions</name> <operator>=</operator> <name>OPNG_REDUCE_NONE</name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>process</name><operator>.</operator><name>status</name></name> <operator>&amp;</operator> <name>INPUT_HAS_DIGITAL_SIGNATURE</name></expr>)</condition><then>
        <block>{
            <comment type="block">/* Do not reduce signed files. */</comment>
            <expr_stmt><expr><name>reductions</name> <operator>=</operator> <name>OPNG_REDUCE_NONE</name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><operator>(</operator><name><name>process</name><operator>.</operator><name>status</name></name> <operator>&amp;</operator> <name>INPUT_IS_PNG_FILE</name><operator>)</operator> <operator>&amp;&amp;</operator>
            <operator>(</operator><name><name>process</name><operator>.</operator><name>status</name></name> <operator>&amp;</operator> <name>INPUT_HAS_MULTIPLE_IMAGES</name><operator>)</operator> <operator>&amp;&amp;</operator>
            <operator>(</operator><name>reductions</name> <operator>!=</operator> <name>OPNG_REDUCE_NONE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>options</name><operator>.</operator><name>snip</name></name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>usr_printf</name><argument_list>(
                <argument><expr><literal type="string">"Can't reliably reduce APNG file; disabling reductions.\n"</literal>
                <literal type="string">"(Did you want to -snip and optimize the first frame?)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>reductions</name> <operator>=</operator> <name>OPNG_REDUCE_NONE</name></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="block">/* Try to reduce the image. */</comment>
        <expr_stmt><expr><name><name>process</name><operator>.</operator><name>reductions</name></name> <operator>=</operator>
            <call><name>opng_reduce_image</name><argument_list>(<argument><expr><name>read_ptr</name></expr></argument>, <argument><expr><name>read_info_ptr</name></expr></argument>, <argument><expr><name>reductions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* If the image is reduced, enforce full compression. */</comment>
        <if>if <condition>(<expr><name><name>process</name><operator>.</operator><name>reductions</name></name> <operator>!=</operator> <name>OPNG_REDUCE_NONE</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>opng_load_image_info</name><argument_list>(<argument><expr><name>read_ptr</name></expr></argument>, <argument><expr><name>read_info_ptr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">"Reducing image to "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>opng_print_image_info</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="block">/* Change the interlace type if required. */</comment>
        <if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>interlace</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
            <name><name>image</name><operator>.</operator><name>interlace_type</name></name> <operator>!=</operator> <name><name>options</name><operator>.</operator><name>interlace</name></name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name><name>image</name><operator>.</operator><name>interlace_type</name></name> <operator>=</operator> <name><name>options</name><operator>.</operator><name>interlace</name></name></expr>;</expr_stmt>
            <comment type="block">/* A change in interlacing requires IDAT recoding. */</comment>
            <expr_stmt><expr><name><name>process</name><operator>.</operator><name>status</name></name> <operator>|=</operator> <name>OUTPUT_NEEDS_NEW_IDAT</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block>
    <macro><name>Catch</name> <argument_list>(<argument>err_msg</argument>)</argument_list></macro>
    <block>{
        <comment type="block">/* Do the cleanup, then rethrow the exception. */</comment>
        <expr_stmt><expr><call><name>png_data_freer</name><argument_list>(<argument><expr><name>read_ptr</name></expr></argument>, <argument><expr><name>read_info_ptr</name></expr></argument>,
                       <argument><expr><name>PNG_DESTROY_WILL_FREE_DATA</name></expr></argument>, <argument><expr><name>PNG_FREE_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>png_destroy_read_struct</name><argument_list>(<argument><expr><operator>&amp;</operator><name>read_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>read_info_ptr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Throw</name></type> <name>err_msg</name></decl>;</decl_stmt>
    }</block>

    <comment type="block">/* Destroy the libpng structures, but leave the enclosed data intact
     * to allow further processing.
     */</comment>
    <expr_stmt><expr><call><name>png_data_freer</name><argument_list>(<argument><expr><name>read_ptr</name></expr></argument>, <argument><expr><name>read_info_ptr</name></expr></argument>,
                   <argument><expr><name>PNG_USER_WILL_FREE_DATA</name></expr></argument>, <argument><expr><name>PNG_FREE_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>png_destroy_read_struct</name><argument_list>(<argument><expr><operator>&amp;</operator><name>read_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>read_info_ptr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
 * PNG file writing.
 *
 * If the output file is NULL, PNG encoding is still done,
 * but no file is written.
 */</comment>
<function><specifier>static</specifier> <type><name>void</name></type>
<name>opng_write_file</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>outfile</name></decl></parameter>,
                <parameter><decl><type><name>int</name></type> <name>compression_level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>memory_level</name></decl></parameter>,
                <parameter><decl><type><name>int</name></type> <name>compression_strategy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filter</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>volatile</specifier></type> <name>err_msg</name></decl>;</decl_stmt>  <comment type="block">/* volatile is required by cexcept */</comment>

    <expr_stmt><expr><call><name>OPNG_ENSURE</name><argument_list>(<argument><expr><name>compression_level</name> <operator>&gt;=</operator> <name>OPNG_COMPR_LEVEL_MIN</name> <operator>&amp;&amp;</operator>
                <name>compression_level</name> <operator>&lt;=</operator> <name>OPNG_COMPR_LEVEL_MAX</name> <operator>&amp;&amp;</operator>
                <name>memory_level</name> <operator>&gt;=</operator> <name>OPNG_MEM_LEVEL_MIN</name> <operator>&amp;&amp;</operator>
                <name>memory_level</name> <operator>&lt;=</operator> <name>OPNG_MEM_LEVEL_MAX</name> <operator>&amp;&amp;</operator>
                <name>compression_strategy</name> <operator>&gt;=</operator> <name>OPNG_STRATEGY_MIN</name> <operator>&amp;&amp;</operator>
                <name>compression_strategy</name> <operator>&lt;=</operator> <name>OPNG_STRATEGY_MAX</name> <operator>&amp;&amp;</operator>
                <name>filter</name> <operator>&gt;=</operator> <name>OPNG_FILTER_MIN</name> <operator>&amp;&amp;</operator>
                <name>filter</name> <operator>&lt;=</operator> <name>OPNG_FILTER_MAX</name></expr></argument>,
                <argument><expr><literal type="string">"Invalid encoding parameters"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>Try</name></macro>
    <block>{
        <expr_stmt><expr><name>write_ptr</name> <operator>=</operator> <call><name>png_create_write_struct</name><argument_list>(<argument><expr><name>PNG_LIBPNG_VER_STRING</name></expr></argument>,
                                            <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>opng_error</name></expr></argument>, <argument><expr><name>opng_warning</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>write_info_ptr</name> <operator>=</operator> <call><name>png_create_info_struct</name><argument_list>(<argument><expr><name>write_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>write_info_ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>Throw</name> <literal type="string">"Out of memory"</literal></expr>;</expr_stmt></block></then></if>

        <expr_stmt><expr><call><name>png_set_compression_level</name><argument_list>(<argument><expr><name>write_ptr</name></expr></argument>, <argument><expr><name>compression_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>png_set_compression_mem_level</name><argument_list>(<argument><expr><name>write_ptr</name></expr></argument>, <argument><expr><name>memory_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>png_set_compression_strategy</name><argument_list>(<argument><expr><name>write_ptr</name></expr></argument>, <argument><expr><name>compression_strategy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>png_set_filter</name><argument_list>(<argument><expr><name>write_ptr</name></expr></argument>, <argument><expr><name>PNG_FILTER_TYPE_BASE</name></expr></argument>, <argument><expr><name><name>filter_table</name><index>[<expr><name>filter</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>compression_strategy</name> <operator>!=</operator> <name>Z_HUFFMAN_ONLY</name> <operator>&amp;&amp;</operator>
            <name>compression_strategy</name> <operator>!=</operator> <name>Z_RLE</name></expr>)</condition><then>
        <block>{
            <if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>window_bits</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name>png_set_compression_window_bits</name><argument_list>(<argument><expr><name>write_ptr</name></expr></argument>,
                                                <argument><expr><name><name>options</name><operator>.</operator><name>window_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></then>
        <else>else
        <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WBITS_8_OK</name></cpp:ifdef>
            <expr_stmt><expr><call><name>png_set_compression_window_bits</name><argument_list>(<argument><expr><name>write_ptr</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
            <expr_stmt><expr><call><name>png_set_compression_window_bits</name><argument_list>(<argument><expr><name>write_ptr</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        }</block></else></if>

        <comment type="block">/* Override the default libpng settings. */</comment>
        <expr_stmt><expr><call><name>png_set_keep_unknown_chunks</name><argument_list>(<argument><expr><name>write_ptr</name></expr></argument>,
                                    <argument><expr><name>PNG_HANDLE_CHUNK_ALWAYS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>png_set_user_limits</name><argument_list>(<argument><expr><name>write_ptr</name></expr></argument>, <argument><expr><name>PNG_UINT_31_MAX</name></expr></argument>, <argument><expr><name>PNG_UINT_31_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Write the PNG stream. */</comment>
        <expr_stmt><expr><call><name>opng_store_image_info</name><argument_list>(<argument><expr><name>write_ptr</name></expr></argument>, <argument><expr><name>write_info_ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>outfile</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>opng_init_write_data</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pngx_set_write_fn</name><argument_list>(<argument><expr><name>write_ptr</name></expr></argument>, <argument><expr><name>outfile</name></expr></argument>, <argument><expr><name>opng_write_data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>png_write_png</name><argument_list>(<argument><expr><name>write_ptr</name></expr></argument>, <argument><expr><name>write_info_ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>err_msg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>  <comment type="block">/* everything is ok */</comment>
    }</block>
    <macro><name>Catch</name> <argument_list>(<argument>err_msg</argument>)</argument_list></macro>
    <block>{
        <comment type="block">/* Set IDAT size to invalid. */</comment>
        <expr_stmt><expr><name><name>process</name><operator>.</operator><name>out_idat_size</name></name> <operator>=</operator> <name>idat_size_max</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block>

    <comment type="block">/* Destroy the libpng structures. */</comment>
    <expr_stmt><expr><call><name>png_destroy_write_struct</name><argument_list>(<argument><expr><operator>&amp;</operator><name>write_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>write_info_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>err_msg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><then>
        <block type="pseudo"><decl_stmt><decl><type><name>Throw</name></type> <name>err_msg</name></decl>;</decl_stmt></block></then></if>
}</block></function>

<comment type="block">/*
 * PNG file copying.
 */</comment>
<function><specifier>static</specifier> <type><name>void</name></type>
<name>opng_copy_file</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>infile</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>outfile</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>volatile</specifier> <name>png_bytep</name></type> <name>buf</name></decl>;</decl_stmt>  <comment type="block">/* volatile is required by cexcept */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>png_uint_32</name></type> <name>buf_size_incr</name> <init>= <expr><literal type="number">0x1000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>png_uint_32</name></type> <name>buf_size</name></decl>, <decl><type ref="prev"/><name>length</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>png_byte</name></type> <name><name>chunk_hdr</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>volatile</specifier></type> <name>err_msg</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>write_ptr</name> <operator>=</operator> <call><name>png_create_write_struct</name><argument_list>(<argument><expr><name>PNG_LIBPNG_VER_STRING</name></expr></argument>,
                                        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>opng_error</name></expr></argument>, <argument><expr><name>opng_warning</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>write_ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>Throw</name> <literal type="string">"Out of memory"</literal></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><call><name>opng_init_write_data</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pngx_set_write_fn</name><argument_list>(<argument><expr><name>write_ptr</name></expr></argument>, <argument><expr><name>outfile</name></expr></argument>, <argument><expr><name>opng_write_data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>Try</name></macro>
    <block>{
        <expr_stmt><expr><name>buf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>buf_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <comment type="block">/* Write the signature in the output file. */</comment>
        <expr_stmt><expr><call><name>pngx_write_sig</name><argument_list>(<argument><expr><name>write_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Copy all chunks until IEND. */</comment>
        <comment type="block">/* Error checking is done only at a very basic level. */</comment>
        <do>do
        <block>{
            <if>if <condition>(<expr><call><name>fread</name><argument_list>(<argument><expr><name>chunk_hdr</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>infile</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><then>  <comment type="block">/* length + name */</comment>
                <block type="pseudo"><expr_stmt><expr><name>Throw</name> <literal type="string">"Read error"</literal></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>png_get_uint_32</name><argument_list>(<argument><expr><name>chunk_hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>length</name> <operator>&gt;</operator> <name>PNG_UINT_31_MAX</name></expr>)</condition><then>
            <block>{
                <if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>length</name> <operator>==</operator> <literal type="number">0x89504e47UL</literal></expr>)</condition><then>  <comment type="block">/* "\x89PNG" */</comment>
                <block>{
                    <comment type="block">/* Skip the signature. */</comment>
                    <continue>continue;</continue>
                }</block></then></if>
                <expr_stmt><expr><name>Throw</name> <literal type="string">"Data error"</literal></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>length</name> <operator>+</operator> <literal type="number">4</literal> <operator>&gt;</operator> <name>buf_size</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name>png_free</name><argument_list>(<argument><expr><name>write_ptr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>buf_size</name> <operator>=</operator>
                    <operator>(</operator><operator>(</operator><operator>(</operator><name>length</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>buf_size_incr</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>buf_size_incr</name><operator>)</operator> <operator>*</operator>
                    <name>buf_size_incr</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>png_bytep</name><operator>)</operator><call><name>png_malloc</name><argument_list>(<argument><expr><name>write_ptr</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="block">/* Do not use realloc() here, it's slower. */</comment>
            }</block></then></if>
            <if>if <condition>(<expr><call><name>fread</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>length</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>infile</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><then>  <comment type="block">/* data + crc */</comment>
                <block type="pseudo"><expr_stmt><expr><name>Throw</name> <literal type="string">"Read error"</literal></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><call><name>png_write_chunk</name><argument_list>(<argument><expr><name>write_ptr</name></expr></argument>, <argument><expr><name>chunk_hdr</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> while <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>chunk_hdr</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>sig_IEND</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>

        <expr_stmt><expr><name>err_msg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>  <comment type="block">/* everything is ok */</comment>
    }</block>
    <macro><name>Catch</name> <argument_list>(<argument>err_msg</argument>)</argument_list></macro>
    <block>{
    }</block>

    <expr_stmt><expr><call><name>png_free</name><argument_list>(<argument><expr><name>write_ptr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>png_destroy_write_struct</name><argument_list>(<argument><expr><operator>&amp;</operator><name>write_ptr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>err_msg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><then>
        <block type="pseudo"><decl_stmt><decl><type><name>Throw</name></type> <name>err_msg</name></decl>;</decl_stmt></block></then></if>
}</block></function>

<comment type="block">/*
 * Iteration initialization.
 */</comment>
<function><specifier>static</specifier> <type><name>void</name></type>
<name>opng_init_iteration</name><parameter_list>(<parameter><decl><type><name>opng_bitset_t</name></type> <name>cmdline_set</name></decl></parameter>, <parameter><decl><type><name>opng_bitset_t</name></type> <name>mask_set</name></decl></parameter>,
                    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>preset</name></decl></parameter>, <parameter><decl><type><name>opng_bitset_t</name> <modifier>*</modifier></type><name>output_set</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>opng_bitset_t</name></type> <name>preset_set</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>check</name></decl>;</decl_stmt>

    <expr_stmt><expr><operator>*</operator><name>output_set</name> <operator>=</operator> <name>cmdline_set</name> <operator>&amp;</operator> <name>mask_set</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><operator>*</operator><name>output_set</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>cmdline_set</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>Throw</name> <literal type="string">"Iteration parameter(s) out of range"</literal></expr>;</expr_stmt></block></then></if>
    <if>if <condition>(<expr><operator>*</operator><name>output_set</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>options</name><operator>.</operator><name>optim_level</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>check</name> <operator>=</operator>
            <call><name>opng_strparse_rangeset_to_bitset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>preset_set</name></expr></argument>, <argument><expr><name>preset</name></expr></argument>, <argument><expr><name>mask_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>OPNG_ENSURE</name><argument_list>(<argument><expr><name>check</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"[internal] Invalid preset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>output_set</name> <operator>|=</operator> <name>preset_set</name> <operator>&amp;</operator> <name>mask_set</name></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<comment type="block">/*
 * Iteration initialization.
 */</comment>
<function><specifier>static</specifier> <type><name>void</name></type>
<name>opng_init_iterations</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>opng_bitset_t</name></type> <name>compr_level_set</name></decl>, <decl><type ref="prev"/><name>mem_level_set</name></decl>, <decl><type ref="prev"/><name>strategy_set</name></decl>, <decl><type ref="prev"/><name>filter_set</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>opng_bitset_t</name></type> <name>strategy_singles_set</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>preset_index</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>;</decl_stmt>

    <comment type="block">/* Set the IDAT size limit. The trials that pass this limit will be
     * abandoned, as there will be no need to wait until their completion.
     * This limit may further decrease as iterations go on.
     */</comment>
    <if>if <condition>(<expr><operator>(</operator><name><name>process</name><operator>.</operator><name>status</name></name> <operator>&amp;</operator> <name>OUTPUT_NEEDS_NEW_IDAT</name><operator>)</operator> <operator>||</operator> <name><name>options</name><operator>.</operator><name>full</name></name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name><name>process</name><operator>.</operator><name>max_idat_size</name></name> <operator>=</operator> <name>idat_size_max</name></expr>;</expr_stmt></block></then>
    <else>else
    <block>{
        <expr_stmt><expr><call><name>OPNG_ENSURE</name><argument_list>(<argument><expr><name><name>process</name><operator>.</operator><name>in_idat_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"No IDAT in input"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Add the input PLTE and tRNS sizes to the initial max IDAT size,
         * to account for the changes that may occur during reduction.
         * This incurs a negligible overhead on processing only: the final
         * IDAT size will not be affected, because a precise check will be
         * performed at the end, inside opng_finish_iterations().
         */</comment>
        <expr_stmt><expr><name><name>process</name><operator>.</operator><name>max_idat_size</name></name> <operator>=</operator>
            <name><name>process</name><operator>.</operator><name>in_idat_size</name></name> <operator>+</operator> <name><name>process</name><operator>.</operator><name>in_plte_trns_size</name></name></expr>;</expr_stmt>
    }</block></else></if>

    <comment type="block">/* Get preset_index from options.optim_level, but leave the latter intact,
     * because the effect of "optipng -o2 -z... -f..." is slightly different
     * from the effect of "optipng -z... -f..." (without "-o").
     */</comment>
    <expr_stmt><expr><name>preset_index</name> <operator>=</operator> <name><name>options</name><operator>.</operator><name>optim_level</name></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>preset_index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>preset_index</name> <operator>=</operator> <name>OPNG_OPTIM_LEVEL_DEFAULT</name></expr>;</expr_stmt></block></then>
    <elseif>else <if>if <condition>(<expr><name>preset_index</name> <operator>&gt;</operator> <name>OPNG_OPTIM_LEVEL_MAX</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>preset_index</name> <operator>=</operator> <name>OPNG_OPTIM_LEVEL_MAX</name></expr>;</expr_stmt></block></then></if></elseif></if>

    <comment type="block">/* Initialize the iteration sets.
     * Combine the user-defined values with the optimization presets.
     */</comment>
    <expr_stmt><expr><call><name>opng_init_iteration</name><argument_list>(<argument><expr><name><name>options</name><operator>.</operator><name>compr_level_set</name></name></expr></argument>, <argument><expr><name>OPNG_COMPR_LEVEL_SET_MASK</name></expr></argument>,
                        <argument><expr><name><name>presets</name><index>[<expr><name>preset_index</name></expr>]</index></name><operator>.</operator><name>compr_level</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>compr_level_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>opng_init_iteration</name><argument_list>(<argument><expr><name><name>options</name><operator>.</operator><name>mem_level_set</name></name></expr></argument>, <argument><expr><name>OPNG_MEM_LEVEL_SET_MASK</name></expr></argument>,
                        <argument><expr><name><name>presets</name><index>[<expr><name>preset_index</name></expr>]</index></name><operator>.</operator><name>mem_level</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mem_level_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>opng_init_iteration</name><argument_list>(<argument><expr><name><name>options</name><operator>.</operator><name>strategy_set</name></name></expr></argument>, <argument><expr><name>OPNG_STRATEGY_SET_MASK</name></expr></argument>,
                        <argument><expr><name><name>presets</name><index>[<expr><name>preset_index</name></expr>]</index></name><operator>.</operator><name>strategy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strategy_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>opng_init_iteration</name><argument_list>(<argument><expr><name><name>options</name><operator>.</operator><name>filter_set</name></name></expr></argument>, <argument><expr><name>OPNG_FILTER_SET_MASK</name></expr></argument>,
                        <argument><expr><name><name>presets</name><index>[<expr><name>preset_index</name></expr>]</index></name><operator>.</operator><name>filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>filter_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Replace the empty sets with the libpng's "best guess" heuristics. */</comment>
    <if>if <condition>(<expr><name>compr_level_set</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name>opng_bitset_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>compr_level_set</name></expr></argument>, <argument><expr><name>Z_BEST_COMPRESSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>  <comment type="block">/* -zc9 */</comment>
    <if>if <condition>(<expr><name>mem_level_set</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name>opng_bitset_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mem_level_set</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <if>if <condition>(<expr><name><name>image</name><operator>.</operator><name>bit_depth</name></name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>||</operator> <name><name>image</name><operator>.</operator><name>palette</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><then>
    <block>{
        <if>if <condition>(<expr><name>strategy_set</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>opng_bitset_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>strategy_set</name></expr></argument>, <argument><expr><name>Z_DEFAULT_STRATEGY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>  <comment type="block">/* -zs0 */</comment>
        <if>if <condition>(<expr><name>filter_set</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>opng_bitset_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filter_set</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>  <comment type="block">/* -f0 */</comment>
    }</block></then>
    <else>else
    <block>{
        <if>if <condition>(<expr><name>strategy_set</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>opng_bitset_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>strategy_set</name></expr></argument>, <argument><expr><name>Z_FILTERED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>  <comment type="block">/* -zs1 */</comment>
        <if>if <condition>(<expr><name>filter_set</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>opng_bitset_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filter_set</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>  <comment type="block">/* -f0 */</comment>
    }</block></else></if>

    <comment type="block">/* Store the results into process. */</comment>
    <expr_stmt><expr><name><name>process</name><operator>.</operator><name>compr_level_set</name></name> <operator>=</operator> <name>compr_level_set</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>process</name><operator>.</operator><name>mem_level_set</name></name> <operator>=</operator> <name>mem_level_set</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>process</name><operator>.</operator><name>strategy_set</name></name> <operator>=</operator> <name>strategy_set</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>process</name><operator>.</operator><name>filter_set</name></name> <operator>=</operator> <name>filter_set</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>strategy_singles_set</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>Z_HUFFMAN_ONLY</name><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>Z_RLE</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>opng_bitset_count</name><argument_list>(<argument><expr><name>compr_level_set</name></expr></argument>)</argument_list></call> <operator>*</operator>
         <call><name>opng_bitset_count</name><argument_list>(<argument><expr><name>strategy_set</name> <operator>&amp;</operator> <operator>~</operator><name>strategy_singles_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>opng_bitset_count</name><argument_list>(<argument><expr><name>strategy_set</name> <operator>&amp;</operator> <name>strategy_singles_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>process</name><operator>.</operator><name>num_iterations</name></name> <operator>=</operator> <operator>(</operator><name>t1</name> <operator>+</operator> <name>t2</name><operator>)</operator> <operator>*</operator>
                             <call><name>opng_bitset_count</name><argument_list>(<argument><expr><name>mem_level_set</name></expr></argument>)</argument_list></call> <operator>*</operator>
                             <call><name>opng_bitset_count</name><argument_list>(<argument><expr><name>filter_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>OPNG_ENSURE</name><argument_list>(<argument><expr><name><name>process</name><operator>.</operator><name>num_iterations</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Invalid iteration parameters"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
 * Iteration.
 */</comment>
<function><specifier>static</specifier> <type><name>void</name></type>
<name>opng_iterate</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>opng_bitset_t</name></type> <name>compr_level_set</name></decl>, <decl><type ref="prev"/><name>mem_level_set</name></decl>, <decl><type ref="prev"/><name>strategy_set</name></decl>, <decl><type ref="prev"/><name>filter_set</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>compr_level</name></decl>, <decl><type ref="prev"/><name>mem_level</name></decl>, <decl><type ref="prev"/><name>strategy</name></decl>, <decl><type ref="prev"/><name>filter</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>counter</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>line_reused</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>OPNG_ENSURE</name><argument_list>(<argument><expr><name><name>process</name><operator>.</operator><name>num_iterations</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Iterations not initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>compr_level_set</name> <operator>=</operator> <name><name>process</name><operator>.</operator><name>compr_level_set</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mem_level_set</name> <operator>=</operator> <name><name>process</name><operator>.</operator><name>mem_level_set</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>strategy_set</name> <operator>=</operator> <name><name>process</name><operator>.</operator><name>strategy_set</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>filter_set</name> <operator>=</operator> <name><name>process</name><operator>.</operator><name>filter_set</name></name></expr>;</expr_stmt>

    <if>if <condition>(<expr><operator>(</operator><name><name>process</name><operator>.</operator><name>num_iterations</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator>
        <operator>(</operator><name><name>process</name><operator>.</operator><name>status</name></name> <operator>&amp;</operator> <name>OUTPUT_NEEDS_NEW_IDAT</name><operator>)</operator></expr>)</condition><then>
    <block>{
        <comment type="block">/* There is only one combination. Select it and return. */</comment>
        <expr_stmt><expr><name><name>process</name><operator>.</operator><name>best_idat_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="block">/* unknown */</comment>
        <expr_stmt><expr><name><name>process</name><operator>.</operator><name>best_compr_level</name></name> <operator>=</operator> <call><name>opng_bitset_find_first</name><argument_list>(<argument><expr><name>compr_level_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>process</name><operator>.</operator><name>best_mem_level</name></name> <operator>=</operator> <call><name>opng_bitset_find_first</name><argument_list>(<argument><expr><name>mem_level_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>process</name><operator>.</operator><name>best_strategy</name></name> <operator>=</operator> <call><name>opng_bitset_find_first</name><argument_list>(<argument><expr><name>strategy_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>process</name><operator>.</operator><name>best_filter</name></name> <operator>=</operator> <call><name>opng_bitset_find_first</name><argument_list>(<argument><expr><name>filter_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    }</block></then></if>

    <comment type="block">/* Prepare for the big iteration. */</comment>
    <expr_stmt><expr><name><name>process</name><operator>.</operator><name>best_idat_size</name></name> <operator>=</operator> <name>idat_size_max</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>process</name><operator>.</operator><name>best_compr_level</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>process</name><operator>.</operator><name>best_mem_level</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>process</name><operator>.</operator><name>best_strategy</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>process</name><operator>.</operator><name>best_filter</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

    <comment type="block">/* Iterate through the "hyper-rectangle" (zc, zm, zs, f). */</comment>
    <expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">"\nTrying:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>line_reused</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>counter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>filter</name> <operator>=</operator> <name>OPNG_FILTER_MIN</name></expr>;</init>
         <condition><expr><name>filter</name> <operator>&lt;=</operator> <name>OPNG_FILTER_MAX</name></expr>;</condition>
         <incr><expr><operator>++</operator><name>filter</name></expr></incr>)</control>
    <block>{
        <if>if <condition>(<expr><operator>!</operator><call><name>opng_bitset_test</name><argument_list>(<argument><expr><name>filter_set</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><continue>continue;</continue></block></then></if>
        <for>for <control>(<init><expr><name>strategy</name> <operator>=</operator> <name>OPNG_STRATEGY_MIN</name></expr>;</init>
             <condition><expr><name>strategy</name> <operator>&lt;=</operator> <name>OPNG_STRATEGY_MAX</name></expr>;</condition>
             <incr><expr><operator>++</operator><name>strategy</name></expr></incr>)</control>
        <block>{
            <if>if <condition>(<expr><operator>!</operator><call><name>opng_bitset_test</name><argument_list>(<argument><expr><name>strategy_set</name></expr></argument>, <argument><expr><name>strategy</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><continue>continue;</continue></block></then></if>
            <if>if <condition>(<expr><name>strategy</name> <operator>==</operator> <name>Z_HUFFMAN_ONLY</name></expr>)</condition><then>
            <block>{
                <comment type="block">/* Under Z_HUFFMAN_ONLY, all compression levels
                 * (deflate_fast and deflate_slow combined)
                 * produce the same output. Pick level 1.
                 */</comment>
                <expr_stmt><expr><name>compr_level_set</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>opng_bitset_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>compr_level_set</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <elseif>else <if>if <condition>(<expr><name>strategy</name> <operator>==</operator> <name>Z_RLE</name></expr>)</condition><then>
            <block>{
                <comment type="block">/* Under Z_RLE, all deflate_fast compression levels produce
                 * the same output. Ditto about the deflate_slow levels.
                 * Pick level 9, in preference for deflate_slow.
                 */</comment>
                <expr_stmt><expr><name>compr_level_set</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>opng_bitset_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>compr_level_set</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif>
            <else>else
            <block>{
                <comment type="block">/* Restore compr_level_set. */</comment>
                <expr_stmt><expr><name>compr_level_set</name> <operator>=</operator> <name><name>process</name><operator>.</operator><name>compr_level_set</name></name></expr>;</expr_stmt>
            }</block></else></if>
            <for>for <control>(<init><expr><name>compr_level</name> <operator>=</operator> <name>OPNG_COMPR_LEVEL_MAX</name></expr>;</init>
                 <condition><expr><name>compr_level</name> <operator>&gt;=</operator> <name>OPNG_COMPR_LEVEL_MIN</name></expr>;</condition>
                 <incr><expr><operator>--</operator><name>compr_level</name></expr></incr>)</control>
            <block>{
                <if>if <condition>(<expr><operator>!</operator><call><name>opng_bitset_test</name><argument_list>(<argument><expr><name>compr_level_set</name></expr></argument>, <argument><expr><name>compr_level</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <block type="pseudo"><continue>continue;</continue></block></then></if>
                <for>for <control>(<init><expr><name>mem_level</name> <operator>=</operator> <name>OPNG_MEM_LEVEL_MAX</name></expr>;</init>
                     <condition><expr><name>mem_level</name> <operator>&gt;=</operator> <name>OPNG_MEM_LEVEL_MIN</name></expr>;</condition>
                     <incr><expr><operator>--</operator><name>mem_level</name></expr></incr>)</control>
                <block>{
                    <if>if <condition>(<expr><operator>!</operator><call><name>opng_bitset_test</name><argument_list>(<argument><expr><name>mem_level_set</name></expr></argument>, <argument><expr><name>mem_level</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <block type="pseudo"><continue>continue;</continue></block></then></if>
                    <expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">"  zc = %d  zm = %d  zs = %d  f = %d"</literal></expr></argument>,
                               <argument><expr><name>compr_level</name></expr></argument>, <argument><expr><name>mem_level</name></expr></argument>, <argument><expr><name>strategy</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>usr_progress</name><argument_list>(<argument><expr><name>counter</name></expr></argument>, <argument><expr><name><name>process</name><operator>.</operator><name>num_iterations</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><operator>++</operator><name>counter</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>opng_write_file</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,
                                    <argument><expr><name>compr_level</name></expr></argument>, <argument><expr><name>mem_level</name></expr></argument>, <argument><expr><name>strategy</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name><name>process</name><operator>.</operator><name>out_idat_size</name></name> <operator>&gt;</operator> <name>idat_size_max</name></expr>)</condition><then>
                    <block>{
                        <if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>verbose</name></name></expr>)</condition><then>
                        <block>{
                            <expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">"\t\tIDAT too big\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name>line_reused</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                        }</block></then>
                        <else>else
                        <block>{
                            <expr_stmt><expr><call><name>usr_print_cntrl</name><argument_list>(<argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* CR: reset line */</comment>
                            <expr_stmt><expr><name>line_reused</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                        }</block></else></if>
                        <continue>continue;</continue>
                    }</block></then></if>
                    <expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">"\t\tIDAT size = %"</literal> <name>OPNG_FSIZE_PRIu</name> <literal type="string">"\n"</literal></expr></argument>,
                               <argument><expr><name><name>process</name><operator>.</operator><name>out_idat_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>line_reused</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name><name>process</name><operator>.</operator><name>best_idat_size</name></name> <operator>&lt;</operator> <name><name>process</name><operator>.</operator><name>out_idat_size</name></name></expr>)</condition><then>
                    <block>{
                        <comment type="block">/* The current best size is smaller than the last size.
                         * Discard the last iteration.
                         */</comment>
                        <continue>continue;</continue>
                    }</block></then></if>
                    <if>if <condition>(<expr><name><name>process</name><operator>.</operator><name>best_idat_size</name></name> <operator>==</operator> <name><name>process</name><operator>.</operator><name>out_idat_size</name></name> <operator>&amp;&amp;</operator>
                        <operator>(</operator><name><name>process</name><operator>.</operator><name>best_strategy</name></name> <operator>==</operator> <name>Z_HUFFMAN_ONLY</name> <operator>||</operator>
                         <name><name>process</name><operator>.</operator><name>best_strategy</name></name> <operator>==</operator> <name>Z_RLE</name><operator>)</operator></expr>)</condition><then>
                    <block>{
                        <comment type="block">/* The current best size is equal to the last size;
                         * the current best strategy is already the fastest.
                         * Discard the last iteration.
                         */</comment>
                        <continue>continue;</continue>
                    }</block></then></if>
                    <expr_stmt><expr><name><name>process</name><operator>.</operator><name>best_compr_level</name></name> <operator>=</operator> <name>compr_level</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>process</name><operator>.</operator><name>best_mem_level</name></name> <operator>=</operator> <name>mem_level</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>process</name><operator>.</operator><name>best_strategy</name></name> <operator>=</operator> <name>strategy</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>process</name><operator>.</operator><name>best_filter</name></name> <operator>=</operator> <name>filter</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>process</name><operator>.</operator><name>best_idat_size</name></name> <operator>=</operator> <name><name>process</name><operator>.</operator><name>out_idat_size</name></name></expr>;</expr_stmt>
                    <if>if <condition>(<expr><operator>!</operator><name><name>options</name><operator>.</operator><name>full</name></name></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><name><name>process</name><operator>.</operator><name>max_idat_size</name></name> <operator>=</operator> <name><name>process</name><operator>.</operator><name>out_idat_size</name></name></expr>;</expr_stmt></block></then></if>
                }</block></for>
            }</block></for>
        }</block></for>
    }</block></for>
    <if>if <condition>(<expr><name>line_reused</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name>usr_print_cntrl</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>  <comment type="block">/* minus N: erase N chars from start of line */</comment>

    <expr_stmt><expr><call><name>OPNG_ENSURE</name><argument_list>(<argument><expr><name>counter</name> <operator>==</operator> <name><name>process</name><operator>.</operator><name>num_iterations</name></name></expr></argument>,
                <argument><expr><literal type="string">"Inconsistent iteration counter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>usr_progress</name><argument_list>(<argument><expr><name>counter</name></expr></argument>, <argument><expr><name><name>process</name><operator>.</operator><name>num_iterations</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
 * Iteration finalization.
 */</comment>
<function><specifier>static</specifier> <type><name>void</name></type>
<name>opng_finish_iterations</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name><name>process</name><operator>.</operator><name>best_idat_size</name></name> <operator>+</operator> <name><name>process</name><operator>.</operator><name>out_plte_trns_size</name></name> <operator>&lt;</operator>
        <name><name>process</name><operator>.</operator><name>in_idat_size</name></name> <operator>+</operator> <name><name>process</name><operator>.</operator><name>in_plte_trns_size</name></name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name><name>process</name><operator>.</operator><name>status</name></name> <operator>|=</operator> <name>OUTPUT_NEEDS_NEW_IDAT</name></expr>;</expr_stmt></block></then></if>
    <if>if <condition>(<expr><name><name>process</name><operator>.</operator><name>status</name></name> <operator>&amp;</operator> <name>OUTPUT_NEEDS_NEW_IDAT</name></expr>)</condition><then>
    <block>{
        <if>if <condition>(<expr><name><name>process</name><operator>.</operator><name>best_idat_size</name></name> <operator>&lt;=</operator> <name>idat_size_max</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">"\nSelecting parameters:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">"  zc = %d  zm = %d  zs = %d  f = %d"</literal></expr></argument>,
                       <argument><expr><name><name>process</name><operator>.</operator><name>best_compr_level</name></name></expr></argument>, <argument><expr><name><name>process</name><operator>.</operator><name>best_mem_level</name></name></expr></argument>,
                       <argument><expr><name><name>process</name><operator>.</operator><name>best_strategy</name></name></expr></argument>, <argument><expr><name><name>process</name><operator>.</operator><name>best_filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>process</name><operator>.</operator><name>best_idat_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block>{
                <comment type="block">/* At least one trial has been run. */</comment>
                <expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">"\t\tIDAT size = %"</literal> <name>OPNG_FSIZE_PRIu</name></expr></argument>,
                           <argument><expr><name><name>process</name><operator>.</operator><name>best_idat_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <comment type="block">/* The compressed image data is larger than the maximum allowed. */</comment>
            <expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">"  zc = *  zm = *  zs = *  f = *\t\tIDAT size &gt; %s\n"</literal></expr></argument>,
                       <argument><expr><name>idat_size_max_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then></if>
}</block></function>

<comment type="block">/*
 * Image file optimization.
 */</comment>
<function><specifier>static</specifier> <type><name>void</name></type>
<name>opng_optimize_impl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>infile_name</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><specifier>static</specifier> <type><name>FILE</name> <modifier>*</modifier></type><name>infile</name></decl>, <modifier>*</modifier><decl><type ref="prev"/><name>outfile</name></decl>;</decl_stmt>         <comment type="block">/* static or volatile is required */</comment>
    <decl_stmt><decl><specifier>static</specifier> <type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>infile_name_local</name></decl>;</decl_stmt>                      <comment type="block">/* by cexcept */</comment>
    <decl_stmt><decl><specifier>static</specifier> <type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>outfile_name</name></decl>, <modifier>*</modifier><decl><type ref="prev"/><name>bakfile_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>static</specifier> <type><name>int</name></type> <name>new_outfile</name></decl>, <decl><type ref="prev"/><name>has_backup</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>name_buf</name><index>[<expr><name>FILENAME_MAX</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>tmp_buf</name><index>[<expr><name>FILENAME_MAX</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>volatile</specifier></type> <name>err_msg</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>process</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>process</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>force</name></name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name><name>process</name><operator>.</operator><name>status</name></name> <operator>|=</operator> <name>OUTPUT_NEEDS_NEW_IDAT</name></expr>;</expr_stmt></block></then></if>

    <expr_stmt><expr><name>err_msg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>  <comment type="block">/* prepare for error handling */</comment>

    <expr_stmt><expr><name>infile_name_local</name> <operator>=</operator> <name>infile_name</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><operator>(</operator><name>infile</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>infile_name_local</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>Throw</name> <literal type="string">"Can't open the input file"</literal></expr>;</expr_stmt></block></then></if>
    <macro><name>Try</name></macro>
    <block>{
        <expr_stmt><expr><call><name>opng_read_file</name><argument_list>(<argument><expr><name>infile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
    <macro><name>Catch</name> <argument_list>(<argument>err_msg</argument>)</argument_list></macro>
    <block>{
        <expr_stmt><expr><call><name>OPNG_ENSURE</name><argument_list>(<argument><expr><name>err_msg</name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"Mysterious error in opng_read_file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>infile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* finally */</comment>
    <if>if <condition>(<expr><name>err_msg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><then>
        <block type="pseudo"><decl_stmt><decl><type><name>Throw</name></type> <name>err_msg</name></decl>;</decl_stmt></block></then></if>  <comment type="block">/* rethrow */</comment>

    <comment type="block">/* Check the error flag. This must be the first check. */</comment>
    <if>if <condition>(<expr><name><name>process</name><operator>.</operator><name>status</name></name> <operator>&amp;</operator> <name>INPUT_HAS_ERRORS</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">"Recoverable errors found in input."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>fix</name></name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">" Fixing...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>process</name><operator>.</operator><name>status</name></name> <operator>|=</operator> <name>OUTPUT_NEEDS_NEW_FILE</name></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">" Rerun "</literal> <name>PROGRAM_NAME</name> <literal type="string">" with -fix enabled.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>Throw</name> <literal type="string">"Previous error(s) not fixed"</literal></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then></if>

    <comment type="block">/* Check the junk flag. */</comment>
    <if>if <condition>(<expr><name><name>process</name><operator>.</operator><name>status</name></name> <operator>&amp;</operator> <name>INPUT_HAS_JUNK</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name><name>process</name><operator>.</operator><name>status</name></name> <operator>|=</operator> <name>OUTPUT_NEEDS_NEW_FILE</name></expr>;</expr_stmt></block></then></if>

    <comment type="block">/* Check the PNG signature and datastream flags. */</comment>
    <if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>process</name><operator>.</operator><name>status</name></name> <operator>&amp;</operator> <name>INPUT_HAS_PNG_SIGNATURE</name><operator>)</operator></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name><name>process</name><operator>.</operator><name>status</name></name> <operator>|=</operator> <name>OUTPUT_NEEDS_NEW_FILE</name></expr>;</expr_stmt></block></then></if>
    <if>if <condition>(<expr><name><name>process</name><operator>.</operator><name>status</name></name> <operator>&amp;</operator> <name>INPUT_HAS_PNG_DATASTREAM</name></expr>)</condition><then>
    <block>{
        <if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>nz</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>process</name><operator>.</operator><name>status</name></name> <operator>&amp;</operator> <name>OUTPUT_NEEDS_NEW_IDAT</name><operator>)</operator></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>usr_printf</name><argument_list>(
                <argument><expr><literal type="string">"IDAT recoding is necessary, but is disabled by the user.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>Throw</name> <literal type="string">"Can't continue"</literal></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then>
    <else>else
        <block type="pseudo"><expr_stmt><expr><name><name>process</name><operator>.</operator><name>status</name></name> <operator>|=</operator> <name>OUTPUT_NEEDS_NEW_IDAT</name></expr>;</expr_stmt></block></else></if>

    <comment type="block">/* Check the digital signature flag. */</comment>
    <if>if <condition>(<expr><name><name>process</name><operator>.</operator><name>status</name></name> <operator>&amp;</operator> <name>INPUT_HAS_DIGITAL_SIGNATURE</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">"Digital signature found in input."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>force</name></name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">" Erasing...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>process</name><operator>.</operator><name>status</name></name> <operator>|=</operator> <name>OUTPUT_NEEDS_NEW_FILE</name></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">" Rerun "</literal> <name>PROGRAM_NAME</name> <literal type="string">" with -force enabled.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>Throw</name> <literal type="string">"Can't optimize digitally-signed files"</literal></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then></if>

    <comment type="block">/* Check the multi-image flag. */</comment>
    <if>if <condition>(<expr><name><name>process</name><operator>.</operator><name>status</name></name> <operator>&amp;</operator> <name>INPUT_HAS_MULTIPLE_IMAGES</name></expr>)</condition><then>
    <block>{
        <if>if <condition>(<expr><operator>!</operator><name><name>options</name><operator>.</operator><name>snip</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>process</name><operator>.</operator><name>status</name></name> <operator>&amp;</operator> <name>INPUT_IS_PNG_FILE</name><operator>)</operator></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">"Conversion to PNG requires snipping. "</literal>
                       <literal type="string">"Rerun "</literal> <name>PROGRAM_NAME</name> <literal type="string">" with -snip enabled.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>Throw</name> <literal type="string">"Incompatible input format"</literal></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>
    <if>if <condition>(<expr><operator>(</operator><name><name>process</name><operator>.</operator><name>status</name></name> <operator>&amp;</operator> <name>INPUT_HAS_APNG</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>options</name><operator>.</operator><name>snip</name></name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name><name>process</name><operator>.</operator><name>status</name></name> <operator>|=</operator> <name>OUTPUT_NEEDS_NEW_FILE</name></expr>;</expr_stmt></block></then></if>

    <comment type="block">/* Check the stripped-data flag. */</comment>
    <if>if <condition>(<expr><name><name>process</name><operator>.</operator><name>status</name></name> <operator>&amp;</operator> <name>INPUT_HAS_STRIPPED_DATA</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">"Stripping metadata...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

    <comment type="block">/* Initialize the output file name. */</comment>
    <expr_stmt><expr><name>outfile_name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>process</name><operator>.</operator><name>status</name></name> <operator>&amp;</operator> <name>INPUT_IS_PNG_FILE</name><operator>)</operator></expr>)</condition><then>
    <block>{
        <if>if <condition>(<expr><call><name>opng_path_replace_ext</name><argument_list>(<argument><expr><name>name_buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                                  <argument><expr><name>infile_name_local</name></expr></argument>, <argument><expr><literal type="string">".png"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>Throw</name> <literal type="string">"Can't create the output file (name too long)"</literal></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>outfile_name</name> <operator>=</operator> <name>name_buf</name></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>out_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>outfile_name</name> <operator>=</operator> <name><name>options</name><operator>.</operator><name>out_name</name></name></expr>;</expr_stmt></block></then></if>  <comment type="block">/* override the old name */</comment>
    <if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>dir_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><then>
    <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tmp_name</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>outfile_name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>tmp_buf</name></expr></argument>, <argument><expr><name>outfile_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>tmp_name</name> <operator>=</operator> <name>tmp_buf</name></expr>;</expr_stmt>
        }</block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name>tmp_name</name> <operator>=</operator> <name>infile_name_local</name></expr>;</expr_stmt></block></else></if>
        <if>if <condition>(<expr><call><name>opng_path_replace_dir</name><argument_list>(<argument><expr><name>name_buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                                  <argument><expr><name>tmp_name</name></expr></argument>, <argument><expr><name><name>options</name><operator>.</operator><name>dir_name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>Throw</name> <literal type="string">"Can't create the output file (name too long)"</literal></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>outfile_name</name> <operator>=</operator> <name>name_buf</name></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr><name>outfile_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>outfile_name</name> <operator>=</operator> <name>infile_name_local</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>new_outfile</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    }</block></then>
    <else>else
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>test_eq</name> <init>= <expr><call><name>opng_os_test_eq</name><argument_list>(<argument><expr><name>infile_name_local</name></expr></argument>, <argument><expr><name>outfile_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>test_eq</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>new_outfile</name> <operator>=</operator> <operator>(</operator><name>test_eq</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt></block></then>
        <else>else
        <block>{
            <comment type="block">/* We don't know if the two paths point to the same file.
             * Use a crude path name comparison.
             */</comment>
            <expr_stmt><expr><name>new_outfile</name> <operator>=</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>infile_name_local</name></expr></argument>, <argument><expr><name>outfile_name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
        }</block></else></if>
    }</block></else></if>

    <comment type="block">/* Initialize the backup file name. */</comment>
    <expr_stmt><expr><name>bakfile_name</name> <operator>=</operator> <name>tmp_buf</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>new_outfile</name></expr>)</condition><then>
    <block>{
        <if>if <condition>(<expr><call><name>opng_path_make_backup</name><argument_list>(<argument><expr><name>tmp_buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                                  <argument><expr><name>outfile_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>bakfile_name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block></then></if>
    }</block></then>
    <else>else
    <block>{
        <if>if <condition>(<expr><call><name>opng_path_make_backup</name><argument_list>(<argument><expr><name>tmp_buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                                  <argument><expr><name>infile_name_local</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>bakfile_name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block></then></if>
    }</block></else></if>
    <comment type="block">/* Check the name even in simulation mode, to ensure a uniform behavior. */</comment>
    <if>if <condition>(<expr><name>bakfile_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>Throw</name> <literal type="string">"Can't create backup file (name too long)"</literal></expr>;</expr_stmt></block></then></if>
    <comment type="block">/* Check the backup file before engaging in lengthy trials. */</comment>
    <if>if <condition>(<expr><operator>!</operator><name><name>options</name><operator>.</operator><name>simulate</name></name> <operator>&amp;&amp;</operator> <call><name>opng_os_test</name><argument_list>(<argument><expr><name>outfile_name</name></expr></argument>, <argument><expr><literal type="string">"e"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
    <block>{
        <if>if <condition>(<expr><name>new_outfile</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>options</name><operator>.</operator><name>backup</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>options</name><operator>.</operator><name>clobber</name></name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">"The output file exists. "</literal>
                       <literal type="string">"Rerun "</literal> <name>PROGRAM_NAME</name> <literal type="string">" with -backup enabled.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>Throw</name> <literal type="string">"Can't overwrite the output file"</literal></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>opng_os_test</name><argument_list>(<argument><expr><name>outfile_name</name></expr></argument>, <argument><expr><literal type="string">"fw"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
            <operator>(</operator><operator>!</operator><name><name>options</name><operator>.</operator><name>clobber</name></name> <operator>&amp;&amp;</operator> <call><name>opng_os_test</name><argument_list>(<argument><expr><name>bakfile_name</name></expr></argument>, <argument><expr><literal type="string">"e"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>Throw</name> <literal type="string">"Can't back up the existing output file"</literal></expr>;</expr_stmt></block></then></if>
    }</block></then></if>

    <comment type="block">/* Display the input IDAT/file sizes. */</comment>
    <if>if <condition>(<expr><name><name>process</name><operator>.</operator><name>status</name></name> <operator>&amp;</operator> <name>INPUT_HAS_PNG_DATASTREAM</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">"Input IDAT size = %"</literal> <name>OPNG_FSIZE_PRIu</name> <literal type="string">" bytes\n"</literal></expr></argument>,
                   <argument><expr><name><name>process</name><operator>.</operator><name>in_idat_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">"Input file size = %"</literal> <name>OPNG_FSIZE_PRIu</name> <literal type="string">" bytes\n"</literal></expr></argument>,
               <argument><expr><name><name>process</name><operator>.</operator><name>in_file_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Find the best parameters and see if it's worth recompressing. */</comment>
    <if>if <condition>(<expr><operator>!</operator><name><name>options</name><operator>.</operator><name>nz</name></name> <operator>||</operator> <operator>(</operator><name><name>process</name><operator>.</operator><name>status</name></name> <operator>&amp;</operator> <name>OUTPUT_NEEDS_NEW_IDAT</name><operator>)</operator></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>opng_init_iterations</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>opng_iterate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>opng_finish_iterations</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr><name><name>process</name><operator>.</operator><name>status</name></name> <operator>&amp;</operator> <name>OUTPUT_NEEDS_NEW_IDAT</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name><name>process</name><operator>.</operator><name>status</name></name> <operator>|=</operator> <name>OUTPUT_NEEDS_NEW_FILE</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>opng_check_idat_size</name><argument_list>(<argument><expr><name><name>process</name><operator>.</operator><name>best_idat_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="block">/* Stop here? */</comment>
    <if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>process</name><operator>.</operator><name>status</name></name> <operator>&amp;</operator> <name>OUTPUT_NEEDS_NEW_FILE</name><operator>)</operator></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">"\n%s is already optimized.\n"</literal></expr></argument>, <argument><expr><name>infile_name_local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><operator>!</operator><name>new_outfile</name></expr>)</condition><then>
            <block type="pseudo"><return>return;</return></block></then></if>
    }</block></then></if>
    <if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>simulate</name></name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">"\nNo output: simulation mode.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    }</block></then></if>

    <comment type="block">/* Make room for the output file. */</comment>
    <if>if <condition>(<expr><name>new_outfile</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">"\nOutput file: %s\n"</literal></expr></argument>, <argument><expr><name>outfile_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>dir_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>opng_os_create_dir</name><argument_list>(<argument><expr><name><name>options</name><operator>.</operator><name>dir_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>has_backup</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>opng_os_test</name><argument_list>(<argument><expr><name>outfile_name</name></expr></argument>, <argument><expr><literal type="string">"e"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block>{
            <if>if <condition>(<expr><call><name>opng_os_rename</name><argument_list>(<argument><expr><name>outfile_name</name></expr></argument>, <argument><expr><name>bakfile_name</name></expr></argument>,
                               <argument><expr><name><name>options</name><operator>.</operator><name>clobber</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>Throw</name> <literal type="string">"Can't back up the output file"</literal></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name>has_backup</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then>
    <else>else
    <block>{
        <if>if <condition>(<expr><call><name>opng_os_rename</name><argument_list>(<argument><expr><name>infile_name_local</name></expr></argument>, <argument><expr><name>bakfile_name</name></expr></argument>,
                           <argument><expr><name><name>options</name><operator>.</operator><name>clobber</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>Throw</name> <literal type="string">"Can't back up the input file"</literal></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>has_backup</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><name>outfile</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>outfile_name</name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>Try</name></macro>
    <block>{
        <if>if <condition>(<expr><name>outfile</name> <operator>==</operator> <name>NULL</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>Throw</name> <literal type="string">"Can't open the output file"</literal></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name><name>process</name><operator>.</operator><name>status</name></name> <operator>&amp;</operator> <name>OUTPUT_NEEDS_NEW_IDAT</name></expr>)</condition><then>
        <block>{
            <comment type="block">/* Write a brand new PNG datastream to the output. */</comment>
            <expr_stmt><expr><call><name>opng_write_file</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>,
                            <argument><expr><name><name>process</name><operator>.</operator><name>best_compr_level</name></name></expr></argument>, <argument><expr><name><name>process</name><operator>.</operator><name>best_mem_level</name></name></expr></argument>,
                            <argument><expr><name><name>process</name><operator>.</operator><name>best_strategy</name></name></expr></argument>, <argument><expr><name><name>process</name><operator>.</operator><name>best_filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <comment type="block">/* Copy the input PNG datastream to the output. */</comment>
            <expr_stmt><expr><name>infile</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><ternary><condition><expr><name>new_outfile</name></expr> ?</condition><then> <expr><name>infile_name_local</name></expr> </then><else>: <expr><name>bakfile_name</name></expr></else></ternary></expr></argument>,
                           <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>infile</name> <operator>==</operator> <name>NULL</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>Throw</name> <literal type="string">"Can't reopen the input file"</literal></expr>;</expr_stmt></block></then></if>
            <macro><name>Try</name></macro>
            <block>{
                <if>if <condition>(<expr><name><name>process</name><operator>.</operator><name>in_datastream_offset</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
                    <call><name>opng_fseeko</name><argument_list>(<argument><expr><name>infile</name></expr></argument>, <argument><expr><name><name>process</name><operator>.</operator><name>in_datastream_offset</name></name></expr></argument>,
                                <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>Throw</name> <literal type="string">"Can't reposition the input file"</literal></expr>;</expr_stmt></block></then></if>
                <expr_stmt><expr><name><name>process</name><operator>.</operator><name>best_idat_size</name></name> <operator>=</operator> <name><name>process</name><operator>.</operator><name>in_idat_size</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>opng_copy_file</name><argument_list>(<argument><expr><name>infile</name></expr></argument>, <argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <macro><name>Catch</name> <argument_list>(<argument>err_msg</argument>)</argument_list></macro>
            <block>{
                <expr_stmt><expr><call><name>OPNG_ENSURE</name><argument_list>(<argument><expr><name>err_msg</name> <operator>!=</operator> <name>NULL</name></expr></argument>,
                            <argument><expr><literal type="string">"Mysterious error in opng_copy_file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>infile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* finally */</comment>
            <if>if <condition>(<expr><name>err_msg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><then>
                <block type="pseudo"><decl_stmt><decl><type><name>Throw</name></type> <name>err_msg</name></decl>;</decl_stmt></block></then></if>  <comment type="block">/* rethrow */</comment>
        }</block></else></if>
    }</block>
    <macro><name>Catch</name> <argument_list>(<argument>err_msg</argument>)</argument_list></macro>
    <block>{
        <if>if <condition>(<expr><name>outfile</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <comment type="block">/* Restore the original input file and rethrow the exception. */</comment>
        <if>if <condition>(<expr><name>has_backup</name></expr>)</condition><then>
        <block>{
            <if>if <condition>(<expr><call><name>opng_os_rename</name><argument_list>(<argument><expr><name>bakfile_name</name></expr></argument>,
                               <argument><expr><ternary><condition><expr><name>new_outfile</name></expr> ?</condition><then> <expr><name>outfile_name</name></expr> </then><else>: <expr><name>infile_name_local</name></expr></else></ternary></expr></argument>,
                               <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name>opng_print_warning</name><argument_list>(
                    <argument><expr><literal type="string">"Can't recover the original file from backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><call><name>OPNG_ENSURE</name><argument_list>(<argument><expr><name>new_outfile</name></expr></argument>,
                        <argument><expr><literal type="string">"Overwrote input with no temporary backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name>opng_os_unlink</name><argument_list>(<argument><expr><name>outfile_name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name>opng_print_warning</name><argument_list>(<argument><expr><literal type="string">"Can't remove the broken output file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></else></if>
        <decl_stmt><decl><type><name>Throw</name></type> <name>err_msg</name></decl>;</decl_stmt>  <comment type="block">/* rethrow */</comment>
    }</block>
    <comment type="block">/* assert(err_msg == NULL); */</comment>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Preserve file attributes (e.g. ownership, access rights, time stamps)
     * on request, if possible.
     */</comment>
    <if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>preserve</name></name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name>opng_os_copy_attr</name><argument_list>(<argument><expr><ternary><condition><expr><name>new_outfile</name></expr> ?</condition><then> <expr><name>infile_name_local</name></expr> </then><else>: <expr><name>bakfile_name</name></expr></else></ternary></expr></argument>,
                          <argument><expr><name>outfile_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

    <comment type="block">/* Remove the backup file if it is not needed. */</comment>
    <if>if <condition>(<expr><operator>!</operator><name>new_outfile</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>options</name><operator>.</operator><name>backup</name></name></expr>)</condition><then>
    <block>{
        <if>if <condition>(<expr><call><name>opng_os_unlink</name><argument_list>(<argument><expr><name>bakfile_name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>opng_print_warning</name><argument_list>(<argument><expr><literal type="string">"Can't remove the backup file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></then></if>

    <comment type="block">/* Display the output IDAT/file sizes. */</comment>
    <expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">"\nOutput IDAT size = %"</literal> <name>OPNG_FSIZE_PRIu</name> <literal type="string">" bytes"</literal></expr></argument>,
               <argument><expr><name><name>process</name><operator>.</operator><name>out_idat_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>process</name><operator>.</operator><name>status</name></name> <operator>&amp;</operator> <name>INPUT_HAS_PNG_DATASTREAM</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">" ("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>opng_print_fsize_difference</name><argument_list>(<argument><expr><name><name>process</name><operator>.</operator><name>in_idat_size</name></name></expr></argument>,
                                    <argument><expr><name><name>process</name><operator>.</operator><name>out_idat_size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">"\nOutput file size = %"</literal> <name>OPNG_FSIZE_PRIu</name> <literal type="string">" bytes ("</literal></expr></argument>,
               <argument><expr><name><name>process</name><operator>.</operator><name>out_file_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>opng_print_fsize_difference</name><argument_list>(<argument><expr><name><name>process</name><operator>.</operator><name>in_file_size</name></name></expr></argument>,
                                <argument><expr><name><name>process</name><operator>.</operator><name>out_file_size</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">")\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
 * Engine initialization.
 */</comment>
<function><type><name>int</name></type>
<name>opng_initialize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>opng_options</name></name> <modifier>*</modifier></type><name>init_options</name></decl></parameter>,
                <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>opng_ui</name></name> <modifier>*</modifier></type><name>init_ui</name></decl></parameter>)</parameter_list>
<block>{
    <comment type="block">/* Initialize and check the validity of the user interface. */</comment>
    <expr_stmt><expr><name>usr_printf</name> <operator>=</operator> <name><name>init_ui</name><operator>-&gt;</operator><name>printf_fn</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>usr_print_cntrl</name> <operator>=</operator> <name><name>init_ui</name><operator>-&gt;</operator><name>print_cntrl_fn</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>usr_progress</name> <operator>=</operator> <name><name>init_ui</name><operator>-&gt;</operator><name>progress_fn</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>usr_panic</name> <operator>=</operator> <name><name>init_ui</name><operator>-&gt;</operator><name>panic_fn</name></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>usr_printf</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
        <name>usr_print_cntrl</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
        <name>usr_progress</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
        <name>usr_panic</name> <operator>==</operator> <name>NULL</name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block></then></if>

    <comment type="block">/* Initialize and adjust the user options. */</comment>
    <expr_stmt><expr><name>options</name> <operator>=</operator> <operator>*</operator><name>init_options</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>optim_level</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name><name>options</name><operator>.</operator><name>nb</name></name> <operator>=</operator> <name><name>options</name><operator>.</operator><name>nc</name></name> <operator>=</operator> <name><name>options</name><operator>.</operator><name>np</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>options</name><operator>.</operator><name>nz</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="block">/* Start the engine. */</comment>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>summary</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>summary</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>engine</name><operator>.</operator><name>started</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

<comment type="block">/*
 * Engine execution.
 */</comment>
<function><type><name>int</name></type>
<name>opng_optimize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>infile_name</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err_msg</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>volatile</specifier> <name>int</name></type> <name>result</name></decl>;</decl_stmt>  <comment type="block">/* volatile not needed, but keeps compilers happy */</comment>

    <expr_stmt><expr><call><name>OPNG_ENSURE</name><argument_list>(<argument><expr><name><name>engine</name><operator>.</operator><name>started</name></name></expr></argument>, <argument><expr><literal type="string">"The OptiPNG engine is not running"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">"** Processing: %s\n"</literal></expr></argument>, <argument><expr><name>infile_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><name><name>summary</name><operator>.</operator><name>file_count</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>opng_clear_image_info</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <macro><name>Try</name></macro>
    <block>{
        <expr_stmt><expr><call><name>opng_optimize_impl</name><argument_list>(<argument><expr><name>infile_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>process</name><operator>.</operator><name>status</name></name> <operator>&amp;</operator> <name>INPUT_HAS_ERRORS</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><operator>++</operator><name><name>summary</name><operator>.</operator><name>err_count</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator><name><name>summary</name><operator>.</operator><name>fix_count</name></name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>process</name><operator>.</operator><name>status</name></name> <operator>&amp;</operator> <name>INPUT_HAS_MULTIPLE_IMAGES</name></expr>)</condition><then>
        <block>{
            <if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>snip</name></name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><operator>++</operator><name><name>summary</name><operator>.</operator><name>snip_count</name></name></expr>;</expr_stmt></block></then></if>
        }</block></then></if>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    }</block>
    <macro><name>Catch</name> <argument_list>(<argument>err_msg</argument>)</argument_list></macro>
    <block>{
        <expr_stmt><expr><operator>++</operator><name><name>summary</name><operator>.</operator><name>err_count</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>opng_print_error</name><argument_list>(<argument><expr><name>err_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    }</block>
    <expr_stmt><expr><call><name>opng_destroy_image_info</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>result</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * Engine finalization.
 */</comment>
<function><type><name>int</name></type>
<name>opng_finalize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{
    <comment type="block">/* Print the status report. */</comment>
    <if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>verbose</name></name> <operator>||</operator> <name><name>summary</name><operator>.</operator><name>snip_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>summary</name><operator>.</operator><name>err_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">"** Status report\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">"%u file(s) have been processed.\n"</literal></expr></argument>, <argument><expr><name><name>summary</name><operator>.</operator><name>file_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>summary</name><operator>.</operator><name>snip_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">"%u multi-image file(s) have been snipped.\n"</literal></expr></argument>,
                       <argument><expr><name><name>summary</name><operator>.</operator><name>snip_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>summary</name><operator>.</operator><name>err_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">"%u error(s) have been encountered.\n"</literal></expr></argument>,
                       <argument><expr><name><name>summary</name><operator>.</operator><name>err_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>summary</name><operator>.</operator><name>fix_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name>usr_printf</name><argument_list>(<argument><expr><literal type="string">"%u erroneous file(s) have been fixed.\n"</literal></expr></argument>,
                           <argument><expr><name><name>summary</name><operator>.</operator><name>fix_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></then></if>
    }</block></then></if>

    <comment type="block">/* Stop the engine. */</comment>
    <expr_stmt><expr><name><name>engine</name><operator>.</operator><name>started</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
